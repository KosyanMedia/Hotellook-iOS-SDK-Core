// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/common.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum PBPropertyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case other // = 0
  case hotel // = 1
  case aparthotel // = 2
  case bb // = 3
  case apartment // = 4
  case motel // = 5
  case guest // = 6
  case hostel // = 7
  case resort // = 8
  case farm // = 9
  case vacation // = 10
  case lodge // = 11
  case villa // = 12
  case room // = 13
  case UNRECOGNIZED(Int)

  init() {
    self = .other
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .other
    case 1: self = .hotel
    case 2: self = .aparthotel
    case 3: self = .bb
    case 4: self = .apartment
    case 5: self = .motel
    case 6: self = .guest
    case 7: self = .hostel
    case 8: self = .resort
    case 9: self = .farm
    case 10: self = .vacation
    case 11: self = .lodge
    case 12: self = .villa
    case 13: self = .room
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .other: return 0
    case .hotel: return 1
    case .aparthotel: return 2
    case .bb: return 3
    case .apartment: return 4
    case .motel: return 5
    case .guest: return 6
    case .hostel: return 7
    case .resort: return 8
    case .farm: return 9
    case .vacation: return 10
    case .lodge: return 11
    case .villa: return 12
    case .room: return 13
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum PBProposalOptionID: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case bedrooms // = 1
  case breakfast // = 2

  ///It's better to use without_card_required
  case cardRequired // = 3

  ///It's better to use without_deposit
  case deposit // = 4
  case freeWifi // = 5
  case refundable // = 6
  case smoking // = 7
  case beds // = 8
  case available // = 9
  case hotelWebsite // = 10
  case privatePrice // = 11
  case penthouse // = 12
  case allInclusive // = 13
  case priceType // = 14
  case airConditioner // = 15
  case fan // = 16
  case balcony // = 17
  case terrace // = 18
  case dormitory // = 19
  case privateBathroom // = 20
  case view // = 21
  case viewSentence // = 22
  case withoutDeposit // = 23
  case withoutCardRequired // = 24
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .bedrooms
    case 2: self = .breakfast
    case 3: self = .cardRequired
    case 4: self = .deposit
    case 5: self = .freeWifi
    case 6: self = .refundable
    case 7: self = .smoking
    case 8: self = .beds
    case 9: self = .available
    case 10: self = .hotelWebsite
    case 11: self = .privatePrice
    case 12: self = .penthouse
    case 13: self = .allInclusive
    case 14: self = .priceType
    case 15: self = .airConditioner
    case 16: self = .fan
    case 17: self = .balcony
    case 18: self = .terrace
    case 19: self = .dormitory
    case 20: self = .privateBathroom
    case 21: self = .view
    case 22: self = .viewSentence
    case 23: self = .withoutDeposit
    case 24: self = .withoutCardRequired
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .bedrooms: return 1
    case .breakfast: return 2
    case .cardRequired: return 3
    case .deposit: return 4
    case .freeWifi: return 5
    case .refundable: return 6
    case .smoking: return 7
    case .beds: return 8
    case .available: return 9
    case .hotelWebsite: return 10
    case .privatePrice: return 11
    case .penthouse: return 12
    case .allInclusive: return 13
    case .priceType: return 14
    case .airConditioner: return 15
    case .fan: return 16
    case .balcony: return 17
    case .terrace: return 18
    case .dormitory: return 19
    case .privateBathroom: return 20
    case .view: return 21
    case .viewSentence: return 22
    case .withoutDeposit: return 23
    case .withoutCardRequired: return 24
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct PBCoords: SwiftProtobuf.Message {
  static let protoMessageName: String = "Coords"

  var lat: Float = 0

  var lon: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.lat)
      case 2: try decoder.decodeSingularFloatField(value: &self.lon)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lat != 0 {
      try visitor.visitSingularFloatField(value: self.lat, fieldNumber: 1)
    }
    if self.lon != 0 {
      try visitor.visitSingularFloatField(value: self.lon, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBRoom: SwiftProtobuf.Message {
  static let protoMessageName: String = "Room"

  var adults: UInt32 = 0

  var children: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.adults)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.children)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.adults != 0 {
      try visitor.visitSingularUInt32Field(value: self.adults, fieldNumber: 1)
    }
    if !self.children.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.children, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBProposalOptions: SwiftProtobuf.Message {
  static let protoMessageName: String = "ProposalOptions"

  var bedrooms: PBProposalOptions.UintOption {
    get {return _storage._bedrooms ?? PBProposalOptions.UintOption()}
    set {_uniqueStorage()._bedrooms = newValue}
  }
  /// Returns true if `bedrooms` has been explicitly set.
  var hasBedrooms: Bool {return _storage._bedrooms != nil}
  /// Clears the value of `bedrooms`. Subsequent reads from it will return its default value.
  mutating func clearBedrooms() {_storage._bedrooms = nil}

  var breakfast: PBProposalOptions.BoolOption {
    get {return _storage._breakfast ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._breakfast = newValue}
  }
  /// Returns true if `breakfast` has been explicitly set.
  var hasBreakfast: Bool {return _storage._breakfast != nil}
  /// Clears the value of `breakfast`. Subsequent reads from it will return its default value.
  mutating func clearBreakfast() {_storage._breakfast = nil}

  var cardRequired: PBProposalOptions.BoolOption {
    get {return _storage._cardRequired ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._cardRequired = newValue}
  }
  /// Returns true if `cardRequired` has been explicitly set.
  var hasCardRequired: Bool {return _storage._cardRequired != nil}
  /// Clears the value of `cardRequired`. Subsequent reads from it will return its default value.
  mutating func clearCardRequired() {_storage._cardRequired = nil}

  var deposit: PBProposalOptions.BoolOption {
    get {return _storage._deposit ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._deposit = newValue}
  }
  /// Returns true if `deposit` has been explicitly set.
  var hasDeposit: Bool {return _storage._deposit != nil}
  /// Clears the value of `deposit`. Subsequent reads from it will return its default value.
  mutating func clearDeposit() {_storage._deposit = nil}

  var freeWifi: PBProposalOptions.BoolOption {
    get {return _storage._freeWifi ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._freeWifi = newValue}
  }
  /// Returns true if `freeWifi` has been explicitly set.
  var hasFreeWifi: Bool {return _storage._freeWifi != nil}
  /// Clears the value of `freeWifi`. Subsequent reads from it will return its default value.
  mutating func clearFreeWifi() {_storage._freeWifi = nil}

  var refundable: PBProposalOptions.BoolOption {
    get {return _storage._refundable ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._refundable = newValue}
  }
  /// Returns true if `refundable` has been explicitly set.
  var hasRefundable: Bool {return _storage._refundable != nil}
  /// Clears the value of `refundable`. Subsequent reads from it will return its default value.
  mutating func clearRefundable() {_storage._refundable = nil}

  var smoking: PBProposalOptions.BoolOption {
    get {return _storage._smoking ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._smoking = newValue}
  }
  /// Returns true if `smoking` has been explicitly set.
  var hasSmoking: Bool {return _storage._smoking != nil}
  /// Clears the value of `smoking`. Subsequent reads from it will return its default value.
  mutating func clearSmoking() {_storage._smoking = nil}

  var beds: PBProposalOptions.StringUintMapOption {
    get {return _storage._beds ?? PBProposalOptions.StringUintMapOption()}
    set {_uniqueStorage()._beds = newValue}
  }
  /// Returns true if `beds` has been explicitly set.
  var hasBeds: Bool {return _storage._beds != nil}
  /// Clears the value of `beds`. Subsequent reads from it will return its default value.
  mutating func clearBeds() {_storage._beds = nil}

  var available: PBProposalOptions.UintOption {
    get {return _storage._available ?? PBProposalOptions.UintOption()}
    set {_uniqueStorage()._available = newValue}
  }
  /// Returns true if `available` has been explicitly set.
  var hasAvailable: Bool {return _storage._available != nil}
  /// Clears the value of `available`. Subsequent reads from it will return its default value.
  mutating func clearAvailable() {_storage._available = nil}

  var hotelWebsite: PBProposalOptions.BoolOption {
    get {return _storage._hotelWebsite ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._hotelWebsite = newValue}
  }
  /// Returns true if `hotelWebsite` has been explicitly set.
  var hasHotelWebsite: Bool {return _storage._hotelWebsite != nil}
  /// Clears the value of `hotelWebsite`. Subsequent reads from it will return its default value.
  mutating func clearHotelWebsite() {_storage._hotelWebsite = nil}

  var privatePrice: PBProposalOptions.BoolOption {
    get {return _storage._privatePrice ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._privatePrice = newValue}
  }
  /// Returns true if `privatePrice` has been explicitly set.
  var hasPrivatePrice: Bool {return _storage._privatePrice != nil}
  /// Clears the value of `privatePrice`. Subsequent reads from it will return its default value.
  mutating func clearPrivatePrice() {_storage._privatePrice = nil}

  var penthouse: PBProposalOptions.BoolOption {
    get {return _storage._penthouse ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._penthouse = newValue}
  }
  /// Returns true if `penthouse` has been explicitly set.
  var hasPenthouse: Bool {return _storage._penthouse != nil}
  /// Clears the value of `penthouse`. Subsequent reads from it will return its default value.
  mutating func clearPenthouse() {_storage._penthouse = nil}

  var allInclusive: PBProposalOptions.BoolOption {
    get {return _storage._allInclusive ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._allInclusive = newValue}
  }
  /// Returns true if `allInclusive` has been explicitly set.
  var hasAllInclusive: Bool {return _storage._allInclusive != nil}
  /// Clears the value of `allInclusive`. Subsequent reads from it will return its default value.
  mutating func clearAllInclusive() {_storage._allInclusive = nil}

  var priceType: PBProposalOptions.StringOption {
    get {return _storage._priceType ?? PBProposalOptions.StringOption()}
    set {_uniqueStorage()._priceType = newValue}
  }
  /// Returns true if `priceType` has been explicitly set.
  var hasPriceType: Bool {return _storage._priceType != nil}
  /// Clears the value of `priceType`. Subsequent reads from it will return its default value.
  mutating func clearPriceType() {_storage._priceType = nil}

  var airConditioner: PBProposalOptions.BoolOption {
    get {return _storage._airConditioner ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._airConditioner = newValue}
  }
  /// Returns true if `airConditioner` has been explicitly set.
  var hasAirConditioner: Bool {return _storage._airConditioner != nil}
  /// Clears the value of `airConditioner`. Subsequent reads from it will return its default value.
  mutating func clearAirConditioner() {_storage._airConditioner = nil}

  var fan: PBProposalOptions.BoolOption {
    get {return _storage._fan ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._fan = newValue}
  }
  /// Returns true if `fan` has been explicitly set.
  var hasFan: Bool {return _storage._fan != nil}
  /// Clears the value of `fan`. Subsequent reads from it will return its default value.
  mutating func clearFan() {_storage._fan = nil}

  var balcony: PBProposalOptions.BoolOption {
    get {return _storage._balcony ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._balcony = newValue}
  }
  /// Returns true if `balcony` has been explicitly set.
  var hasBalcony: Bool {return _storage._balcony != nil}
  /// Clears the value of `balcony`. Subsequent reads from it will return its default value.
  mutating func clearBalcony() {_storage._balcony = nil}

  var terrace: PBProposalOptions.BoolOption {
    get {return _storage._terrace ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._terrace = newValue}
  }
  /// Returns true if `terrace` has been explicitly set.
  var hasTerrace: Bool {return _storage._terrace != nil}
  /// Clears the value of `terrace`. Subsequent reads from it will return its default value.
  mutating func clearTerrace() {_storage._terrace = nil}

  var dormitory: PBProposalOptions.BoolOption {
    get {return _storage._dormitory ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._dormitory = newValue}
  }
  /// Returns true if `dormitory` has been explicitly set.
  var hasDormitory: Bool {return _storage._dormitory != nil}
  /// Clears the value of `dormitory`. Subsequent reads from it will return its default value.
  mutating func clearDormitory() {_storage._dormitory = nil}

  var privateBathroom: PBProposalOptions.BoolOption {
    get {return _storage._privateBathroom ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._privateBathroom = newValue}
  }
  /// Returns true if `privateBathroom` has been explicitly set.
  var hasPrivateBathroom: Bool {return _storage._privateBathroom != nil}
  /// Clears the value of `privateBathroom`. Subsequent reads from it will return its default value.
  mutating func clearPrivateBathroom() {_storage._privateBathroom = nil}

  var view: PBProposalOptions.StringOption {
    get {return _storage._view ?? PBProposalOptions.StringOption()}
    set {_uniqueStorage()._view = newValue}
  }
  /// Returns true if `view` has been explicitly set.
  var hasView: Bool {return _storage._view != nil}
  /// Clears the value of `view`. Subsequent reads from it will return its default value.
  mutating func clearView() {_storage._view = nil}

  var viewSentence: PBProposalOptions.StringOption {
    get {return _storage._viewSentence ?? PBProposalOptions.StringOption()}
    set {_uniqueStorage()._viewSentence = newValue}
  }
  /// Returns true if `viewSentence` has been explicitly set.
  var hasViewSentence: Bool {return _storage._viewSentence != nil}
  /// Clears the value of `viewSentence`. Subsequent reads from it will return its default value.
  mutating func clearViewSentence() {_storage._viewSentence = nil}

  var withoutCardRequired: PBProposalOptions.BoolOption {
    get {return _storage._withoutCardRequired ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._withoutCardRequired = newValue}
  }
  /// Returns true if `withoutCardRequired` has been explicitly set.
  var hasWithoutCardRequired: Bool {return _storage._withoutCardRequired != nil}
  /// Clears the value of `withoutCardRequired`. Subsequent reads from it will return its default value.
  mutating func clearWithoutCardRequired() {_storage._withoutCardRequired = nil}

  var withoutDeposit: PBProposalOptions.BoolOption {
    get {return _storage._withoutDeposit ?? PBProposalOptions.BoolOption()}
    set {_uniqueStorage()._withoutDeposit = newValue}
  }
  /// Returns true if `withoutDeposit` has been explicitly set.
  var hasWithoutDeposit: Bool {return _storage._withoutDeposit != nil}
  /// Clears the value of `withoutDeposit`. Subsequent reads from it will return its default value.
  mutating func clearWithoutDeposit() {_storage._withoutDeposit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct UintOption: SwiftProtobuf.Message {
    static let protoMessageName: String = PBProposalOptions.protoMessageName + ".UintOption"

    var val: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self.val)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.val != 0 {
        try visitor.visitSingularUInt32Field(value: self.val, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BoolOption: SwiftProtobuf.Message {
    static let protoMessageName: String = PBProposalOptions.protoMessageName + ".BoolOption"

    var val: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &self.val)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.val != false {
        try visitor.visitSingularBoolField(value: self.val, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StringOption: SwiftProtobuf.Message {
    static let protoMessageName: String = PBProposalOptions.protoMessageName + ".StringOption"

    var val: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.val)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.val.isEmpty {
        try visitor.visitSingularStringField(value: self.val, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StringUintMapOption: SwiftProtobuf.Message {
    static let protoMessageName: String = PBProposalOptions.protoMessageName + ".StringUintMapOption"

    var val: Dictionary<String,UInt32> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: &self.val)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.val.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: self.val, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._bedrooms)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._breakfast)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._cardRequired)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._deposit)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._freeWifi)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._refundable)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._smoking)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._beds)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._available)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._hotelWebsite)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._privatePrice)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._penthouse)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._allInclusive)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._priceType)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._airConditioner)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._fan)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._balcony)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._terrace)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._dormitory)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._privateBathroom)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._view)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._viewSentence)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._withoutCardRequired)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._withoutDeposit)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bedrooms {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._breakfast {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._cardRequired {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._deposit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._freeWifi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._refundable {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._smoking {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._beds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._available {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._hotelWebsite {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._privatePrice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._penthouse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._allInclusive {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._priceType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._airConditioner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._fan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._balcony {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._terrace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._dormitory {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._privateBathroom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._view {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._viewSentence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._withoutCardRequired {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._withoutDeposit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PBRoomType: SwiftProtobuf.Message {
  static let protoMessageName: String = "RoomType"

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBDiscount: SwiftProtobuf.Message {
  static let protoMessageName: String = "Discount"

  var gatesRooms: Dictionary<UInt32,PBDiscount.Room> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct RoomDiscount: SwiftProtobuf.Message {
    static let protoMessageName: String = PBDiscount.protoMessageName + ".RoomDiscount"

    var changePercentage: Int32 = 0

    var oldPrice: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self.changePercentage)
        case 2: try decoder.decodeSingularFloatField(value: &self.oldPrice)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.changePercentage != 0 {
        try visitor.visitSingularInt32Field(value: self.changePercentage, fieldNumber: 1)
      }
      if self.oldPrice != 0 {
        try visitor.visitSingularFloatField(value: self.oldPrice, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Room: SwiftProtobuf.Message {
    static let protoMessageName: String = PBDiscount.protoMessageName + ".Room"

    var discounts: Dictionary<UInt32,PBDiscount.RoomDiscount> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDiscount.RoomDiscount>.self, value: &self.discounts)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.discounts.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDiscount.RoomDiscount>.self, value: self.discounts, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDiscount.Room>.self, value: &self.gatesRooms)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gatesRooms.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDiscount.Room>.self, value: self.gatesRooms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBPropertyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OTHER"),
    1: .same(proto: "HOTEL"),
    2: .same(proto: "APARTHOTEL"),
    3: .same(proto: "BB"),
    4: .same(proto: "APARTMENT"),
    5: .same(proto: "MOTEL"),
    6: .same(proto: "GUEST"),
    7: .same(proto: "HOSTEL"),
    8: .same(proto: "RESORT"),
    9: .same(proto: "FARM"),
    10: .same(proto: "VACATION"),
    11: .same(proto: "LODGE"),
    12: .same(proto: "VILLA"),
    13: .same(proto: "ROOM"),
  ]
}

extension PBProposalOptionID: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "none"),
    1: .same(proto: "bedrooms"),
    2: .same(proto: "breakfast"),
    3: .same(proto: "card_required"),
    4: .same(proto: "deposit"),
    5: .same(proto: "free_wifi"),
    6: .same(proto: "refundable"),
    7: .same(proto: "smoking"),
    8: .same(proto: "beds"),
    9: .same(proto: "available"),
    10: .same(proto: "hotel_website"),
    11: .same(proto: "private_price"),
    12: .same(proto: "penthouse"),
    13: .same(proto: "all_inclusive"),
    14: .same(proto: "price_type"),
    15: .same(proto: "air_conditioner"),
    16: .same(proto: "fan"),
    17: .same(proto: "balcony"),
    18: .same(proto: "terrace"),
    19: .same(proto: "dormitory"),
    20: .same(proto: "private_bathroom"),
    21: .same(proto: "view"),
    22: .same(proto: "view_sentence"),
    23: .same(proto: "without_deposit"),
    24: .same(proto: "without_card_required"),
  ]
}

extension PBCoords: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lat"),
    2: .same(proto: "lon"),
  ]

  func _protobuf_generated_isEqualTo(other: PBCoords) -> Bool {
    if self.lat != other.lat {return false}
    if self.lon != other.lon {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adults"),
    2: .same(proto: "children"),
  ]

  func _protobuf_generated_isEqualTo(other: PBRoom) -> Bool {
    if self.adults != other.adults {return false}
    if self.children != other.children {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBProposalOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bedrooms"),
    2: .same(proto: "breakfast"),
    3: .standard(proto: "card_required"),
    4: .same(proto: "deposit"),
    5: .standard(proto: "free_wifi"),
    6: .same(proto: "refundable"),
    7: .same(proto: "smoking"),
    8: .same(proto: "beds"),
    9: .same(proto: "available"),
    10: .standard(proto: "hotel_website"),
    11: .standard(proto: "private_price"),
    12: .same(proto: "penthouse"),
    13: .standard(proto: "all_inclusive"),
    14: .standard(proto: "price_type"),
    15: .standard(proto: "air_conditioner"),
    16: .same(proto: "fan"),
    17: .same(proto: "balcony"),
    18: .same(proto: "terrace"),
    19: .same(proto: "dormitory"),
    20: .standard(proto: "private_bathroom"),
    21: .same(proto: "view"),
    22: .standard(proto: "view_sentence"),
    23: .standard(proto: "without_card_required"),
    24: .standard(proto: "without_deposit"),
  ]

  fileprivate class _StorageClass {
    var _bedrooms: PBProposalOptions.UintOption? = nil
    var _breakfast: PBProposalOptions.BoolOption? = nil
    var _cardRequired: PBProposalOptions.BoolOption? = nil
    var _deposit: PBProposalOptions.BoolOption? = nil
    var _freeWifi: PBProposalOptions.BoolOption? = nil
    var _refundable: PBProposalOptions.BoolOption? = nil
    var _smoking: PBProposalOptions.BoolOption? = nil
    var _beds: PBProposalOptions.StringUintMapOption? = nil
    var _available: PBProposalOptions.UintOption? = nil
    var _hotelWebsite: PBProposalOptions.BoolOption? = nil
    var _privatePrice: PBProposalOptions.BoolOption? = nil
    var _penthouse: PBProposalOptions.BoolOption? = nil
    var _allInclusive: PBProposalOptions.BoolOption? = nil
    var _priceType: PBProposalOptions.StringOption? = nil
    var _airConditioner: PBProposalOptions.BoolOption? = nil
    var _fan: PBProposalOptions.BoolOption? = nil
    var _balcony: PBProposalOptions.BoolOption? = nil
    var _terrace: PBProposalOptions.BoolOption? = nil
    var _dormitory: PBProposalOptions.BoolOption? = nil
    var _privateBathroom: PBProposalOptions.BoolOption? = nil
    var _view: PBProposalOptions.StringOption? = nil
    var _viewSentence: PBProposalOptions.StringOption? = nil
    var _withoutCardRequired: PBProposalOptions.BoolOption? = nil
    var _withoutDeposit: PBProposalOptions.BoolOption? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bedrooms = source._bedrooms
      _breakfast = source._breakfast
      _cardRequired = source._cardRequired
      _deposit = source._deposit
      _freeWifi = source._freeWifi
      _refundable = source._refundable
      _smoking = source._smoking
      _beds = source._beds
      _available = source._available
      _hotelWebsite = source._hotelWebsite
      _privatePrice = source._privatePrice
      _penthouse = source._penthouse
      _allInclusive = source._allInclusive
      _priceType = source._priceType
      _airConditioner = source._airConditioner
      _fan = source._fan
      _balcony = source._balcony
      _terrace = source._terrace
      _dormitory = source._dormitory
      _privateBathroom = source._privateBathroom
      _view = source._view
      _viewSentence = source._viewSentence
      _withoutCardRequired = source._withoutCardRequired
      _withoutDeposit = source._withoutDeposit
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBProposalOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._bedrooms != other_storage._bedrooms {return false}
        if _storage._breakfast != other_storage._breakfast {return false}
        if _storage._cardRequired != other_storage._cardRequired {return false}
        if _storage._deposit != other_storage._deposit {return false}
        if _storage._freeWifi != other_storage._freeWifi {return false}
        if _storage._refundable != other_storage._refundable {return false}
        if _storage._smoking != other_storage._smoking {return false}
        if _storage._beds != other_storage._beds {return false}
        if _storage._available != other_storage._available {return false}
        if _storage._hotelWebsite != other_storage._hotelWebsite {return false}
        if _storage._privatePrice != other_storage._privatePrice {return false}
        if _storage._penthouse != other_storage._penthouse {return false}
        if _storage._allInclusive != other_storage._allInclusive {return false}
        if _storage._priceType != other_storage._priceType {return false}
        if _storage._airConditioner != other_storage._airConditioner {return false}
        if _storage._fan != other_storage._fan {return false}
        if _storage._balcony != other_storage._balcony {return false}
        if _storage._terrace != other_storage._terrace {return false}
        if _storage._dormitory != other_storage._dormitory {return false}
        if _storage._privateBathroom != other_storage._privateBathroom {return false}
        if _storage._view != other_storage._view {return false}
        if _storage._viewSentence != other_storage._viewSentence {return false}
        if _storage._withoutCardRequired != other_storage._withoutCardRequired {return false}
        if _storage._withoutDeposit != other_storage._withoutDeposit {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBProposalOptions.UintOption: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val"),
  ]

  func _protobuf_generated_isEqualTo(other: PBProposalOptions.UintOption) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBProposalOptions.BoolOption: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val"),
  ]

  func _protobuf_generated_isEqualTo(other: PBProposalOptions.BoolOption) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBProposalOptions.StringOption: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val"),
  ]

  func _protobuf_generated_isEqualTo(other: PBProposalOptions.StringOption) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBProposalOptions.StringUintMapOption: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val"),
  ]

  func _protobuf_generated_isEqualTo(other: PBProposalOptions.StringUintMapOption) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBRoomType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: PBRoomType) -> Bool {
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBDiscount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gates_rooms"),
  ]

  func _protobuf_generated_isEqualTo(other: PBDiscount) -> Bool {
    if self.gatesRooms != other.gatesRooms {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBDiscount.RoomDiscount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "change_percentage"),
    2: .standard(proto: "old_price"),
  ]

  func _protobuf_generated_isEqualTo(other: PBDiscount.RoomDiscount) -> Bool {
    if self.changePercentage != other.changePercentage {return false}
    if self.oldPrice != other.oldPrice {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBDiscount.Room: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "discounts"),
  ]

  func _protobuf_generated_isEqualTo(other: PBDiscount.Room) -> Bool {
    if self.discounts != other.discounts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
