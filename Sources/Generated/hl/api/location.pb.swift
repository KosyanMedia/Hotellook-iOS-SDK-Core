// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/location.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBLocation: SwiftProtobuf.Message {
  static let protoMessageName: String = "Location"

  var seasons: Dictionary<String,PBLocation.Season> {
    get {return _storage._seasons}
    set {_uniqueStorage()._seasons = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var countryName: String {
    get {return _storage._countryName}
    set {_uniqueStorage()._countryName = newValue}
  }

  var countryID: UInt32 {
    get {return _storage._countryID}
    set {_uniqueStorage()._countryID = newValue}
  }

  var declensions: Dictionary<UInt32,String> {
    get {return _storage._declensions}
    set {_uniqueStorage()._declensions = newValue}
  }

  var propertyTypesCount: PBLocation.PropertyTypesCount {
    get {return _storage._propertyTypesCount ?? PBLocation.PropertyTypesCount()}
    set {_uniqueStorage()._propertyTypesCount = newValue}
  }
  /// Returns true if `propertyTypesCount` has been explicitly set.
  var hasPropertyTypesCount: Bool {return _storage._propertyTypesCount != nil}
  /// Clears the value of `propertyTypesCount`. Subsequent reads from it will return its default value.
  mutating func clearPropertyTypesCount() {_storage._propertyTypesCount = nil}

  var timezone: String {
    get {return _storage._timezone}
    set {_uniqueStorage()._timezone = newValue}
  }

  var iatas: [String] {
    get {return _storage._iatas}
    set {_uniqueStorage()._iatas = newValue}
  }

  var centerCoords: PBCoords {
    get {return _storage._centerCoords ?? PBCoords()}
    set {_uniqueStorage()._centerCoords = newValue}
  }
  /// Returns true if `centerCoords` has been explicitly set.
  var hasCenterCoords: Bool {return _storage._centerCoords != nil}
  /// Clears the value of `centerCoords`. Subsequent reads from it will return its default value.
  mutating func clearCenterCoords() {_storage._centerCoords = nil}

  var fullName: String {
    get {return _storage._fullName}
    set {_uniqueStorage()._fullName = newValue}
  }

  var poisIds: [UInt32] {
    get {return _storage._poisIds}
    set {_uniqueStorage()._poisIds = newValue}
  }

  var latinName: String {
    get {return _storage._latinName}
    set {_uniqueStorage()._latinName = newValue}
  }

  var latinCountryName: String {
    get {return _storage._latinCountryName}
    set {_uniqueStorage()._latinCountryName = newValue}
  }

  var id: UInt32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var zones: [String] {
    get {return _storage._zones}
    set {_uniqueStorage()._zones = newValue}
  }

  var stateCode: String {
    get {return _storage._stateCode}
    set {_uniqueStorage()._stateCode = newValue}
  }

  var code: String {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var countryCode: String {
    get {return _storage._countryCode}
    set {_uniqueStorage()._countryCode = newValue}
  }

  var latinFullName: String {
    get {return _storage._latinFullName}
    set {_uniqueStorage()._latinFullName = newValue}
  }

  var path: String {
    get {return _storage._path}
    set {_uniqueStorage()._path = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SeasonDate: SwiftProtobuf.Message {
    static let protoMessageName: String = PBLocation.protoMessageName + ".SeasonDate"

    var from: String = String()

    var to: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.from)
        case 2: try decoder.decodeSingularStringField(value: &self.to)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.from.isEmpty {
        try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
      }
      if !self.to.isEmpty {
        try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Season: SwiftProtobuf.Message {
    static let protoMessageName: String = PBLocation.protoMessageName + ".Season"

    var currentSeason: PBLocation.SeasonDate {
      get {return _storage._currentSeason ?? PBLocation.SeasonDate()}
      set {_uniqueStorage()._currentSeason = newValue}
    }
    /// Returns true if `currentSeason` has been explicitly set.
    var hasCurrentSeason: Bool {return _storage._currentSeason != nil}
    /// Clears the value of `currentSeason`. Subsequent reads from it will return its default value.
    mutating func clearCurrentSeason() {_storage._currentSeason = nil}

    var nextSeason: PBLocation.SeasonDate {
      get {return _storage._nextSeason ?? PBLocation.SeasonDate()}
      set {_uniqueStorage()._nextSeason = newValue}
    }
    /// Returns true if `nextSeason` has been explicitly set.
    var hasNextSeason: Bool {return _storage._nextSeason != nil}
    /// Clears the value of `nextSeason`. Subsequent reads from it will return its default value.
    mutating func clearNextSeason() {_storage._nextSeason = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._currentSeason)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._nextSeason)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._currentSeason {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._nextSeason {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct PropertyTypesCount: SwiftProtobuf.Message {
    static let protoMessageName: String = PBLocation.protoMessageName + ".PropertyTypesCount"

    var byTypes: Dictionary<Int32,UInt32> = [:]

    var total: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &self.byTypes)
        case 2: try decoder.decodeSingularUInt32Field(value: &self.total)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.byTypes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufUInt32>.self, value: self.byTypes, fieldNumber: 1)
      }
      if self.total != 0 {
        try visitor.visitSingularUInt32Field(value: self.total, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBLocation.Season>.self, value: &_storage._seasons)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._countryName)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._countryID)
        case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._declensions)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._propertyTypesCount)
        case 7: try decoder.decodeSingularStringField(value: &_storage._timezone)
        case 8: try decoder.decodeRepeatedStringField(value: &_storage._iatas)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._centerCoords)
        case 10: try decoder.decodeSingularStringField(value: &_storage._fullName)
        case 11: try decoder.decodeRepeatedUInt32Field(value: &_storage._poisIds)
        case 12: try decoder.decodeSingularStringField(value: &_storage._latinName)
        case 13: try decoder.decodeSingularStringField(value: &_storage._latinCountryName)
        case 14: try decoder.decodeSingularUInt32Field(value: &_storage._id)
        case 15: try decoder.decodeRepeatedStringField(value: &_storage._zones)
        case 16: try decoder.decodeSingularStringField(value: &_storage._stateCode)
        case 17: try decoder.decodeSingularStringField(value: &_storage._code)
        case 18: try decoder.decodeSingularStringField(value: &_storage._countryCode)
        case 19: try decoder.decodeSingularStringField(value: &_storage._latinFullName)
        case 20: try decoder.decodeSingularStringField(value: &_storage._path)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._seasons.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBLocation.Season>.self, value: _storage._seasons, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._countryName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryName, fieldNumber: 3)
      }
      if _storage._countryID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._countryID, fieldNumber: 4)
      }
      if !_storage._declensions.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._declensions, fieldNumber: 5)
      }
      if let v = _storage._propertyTypesCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._timezone.isEmpty {
        try visitor.visitSingularStringField(value: _storage._timezone, fieldNumber: 7)
      }
      if !_storage._iatas.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._iatas, fieldNumber: 8)
      }
      if let v = _storage._centerCoords {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._fullName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fullName, fieldNumber: 10)
      }
      if !_storage._poisIds.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._poisIds, fieldNumber: 11)
      }
      if !_storage._latinName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._latinName, fieldNumber: 12)
      }
      if !_storage._latinCountryName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._latinCountryName, fieldNumber: 13)
      }
      if _storage._id != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._id, fieldNumber: 14)
      }
      if !_storage._zones.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._zones, fieldNumber: 15)
      }
      if !_storage._stateCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stateCode, fieldNumber: 16)
      }
      if !_storage._code.isEmpty {
        try visitor.visitSingularStringField(value: _storage._code, fieldNumber: 17)
      }
      if !_storage._countryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryCode, fieldNumber: 18)
      }
      if !_storage._latinFullName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._latinFullName, fieldNumber: 19)
      }
      if !_storage._path.isEmpty {
        try visitor.visitSingularStringField(value: _storage._path, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBLocation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seasons"),
    2: .same(proto: "name"),
    3: .standard(proto: "country_name"),
    4: .standard(proto: "country_id"),
    5: .same(proto: "declensions"),
    6: .standard(proto: "property_types_count"),
    7: .same(proto: "timezone"),
    8: .same(proto: "iatas"),
    9: .standard(proto: "center_coords"),
    10: .standard(proto: "full_name"),
    11: .standard(proto: "pois_ids"),
    12: .standard(proto: "latin_name"),
    13: .standard(proto: "latin_country_name"),
    14: .same(proto: "id"),
    15: .same(proto: "zones"),
    16: .standard(proto: "state_code"),
    17: .same(proto: "code"),
    18: .standard(proto: "country_code"),
    19: .standard(proto: "latin_full_name"),
    20: .same(proto: "path"),
  ]

  fileprivate class _StorageClass {
    var _seasons: Dictionary<String,PBLocation.Season> = [:]
    var _name: String = String()
    var _countryName: String = String()
    var _countryID: UInt32 = 0
    var _declensions: Dictionary<UInt32,String> = [:]
    var _propertyTypesCount: PBLocation.PropertyTypesCount? = nil
    var _timezone: String = String()
    var _iatas: [String] = []
    var _centerCoords: PBCoords? = nil
    var _fullName: String = String()
    var _poisIds: [UInt32] = []
    var _latinName: String = String()
    var _latinCountryName: String = String()
    var _id: UInt32 = 0
    var _zones: [String] = []
    var _stateCode: String = String()
    var _code: String = String()
    var _countryCode: String = String()
    var _latinFullName: String = String()
    var _path: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _seasons = source._seasons
      _name = source._name
      _countryName = source._countryName
      _countryID = source._countryID
      _declensions = source._declensions
      _propertyTypesCount = source._propertyTypesCount
      _timezone = source._timezone
      _iatas = source._iatas
      _centerCoords = source._centerCoords
      _fullName = source._fullName
      _poisIds = source._poisIds
      _latinName = source._latinName
      _latinCountryName = source._latinCountryName
      _id = source._id
      _zones = source._zones
      _stateCode = source._stateCode
      _code = source._code
      _countryCode = source._countryCode
      _latinFullName = source._latinFullName
      _path = source._path
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBLocation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._seasons != other_storage._seasons {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._countryName != other_storage._countryName {return false}
        if _storage._countryID != other_storage._countryID {return false}
        if _storage._declensions != other_storage._declensions {return false}
        if _storage._propertyTypesCount != other_storage._propertyTypesCount {return false}
        if _storage._timezone != other_storage._timezone {return false}
        if _storage._iatas != other_storage._iatas {return false}
        if _storage._centerCoords != other_storage._centerCoords {return false}
        if _storage._fullName != other_storage._fullName {return false}
        if _storage._poisIds != other_storage._poisIds {return false}
        if _storage._latinName != other_storage._latinName {return false}
        if _storage._latinCountryName != other_storage._latinCountryName {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._zones != other_storage._zones {return false}
        if _storage._stateCode != other_storage._stateCode {return false}
        if _storage._code != other_storage._code {return false}
        if _storage._countryCode != other_storage._countryCode {return false}
        if _storage._latinFullName != other_storage._latinFullName {return false}
        if _storage._path != other_storage._path {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBLocation.SeasonDate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
  ]

  func _protobuf_generated_isEqualTo(other: PBLocation.SeasonDate) -> Bool {
    if self.from != other.from {return false}
    if self.to != other.to {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBLocation.Season: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_season"),
    2: .standard(proto: "next_season"),
  ]

  fileprivate class _StorageClass {
    var _currentSeason: PBLocation.SeasonDate? = nil
    var _nextSeason: PBLocation.SeasonDate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _currentSeason = source._currentSeason
      _nextSeason = source._nextSeason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBLocation.Season) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._currentSeason != other_storage._currentSeason {return false}
        if _storage._nextSeason != other_storage._nextSeason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBLocation.PropertyTypesCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "by_types"),
    2: .same(proto: "total"),
  ]

  func _protobuf_generated_isEqualTo(other: PBLocation.PropertyTypesCount) -> Bool {
    if self.byTypes != other.byTypes {return false}
    if self.total != other.total {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
