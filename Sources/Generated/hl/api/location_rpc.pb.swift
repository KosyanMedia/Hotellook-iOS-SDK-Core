// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/location_rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBLocationInfoRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "LocationInfoRequest"

  var locationsIds: [UInt32] = []

  var locale: String = String()

  /// fields use to define what fields needs in response
  var fields: String = String()

  /// Remove hotels without minprices from response
  var hideWithoutMinprice: Bool = false

  /// If hotel doesn't have ty data, set rating as 0
  var useTrustyouRating: Bool = false

  var lat: Float = 0

  var lon: Float = 0

  /// Add rentals to reponse, need for apartments app
  var rentals: Bool = false

  /// hide_pois_without_name - filtered pois without name
  var hidePoisWithoutName: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.locationsIds)
      case 2: try decoder.decodeSingularStringField(value: &self.locale)
      case 3: try decoder.decodeSingularStringField(value: &self.fields)
      case 4: try decoder.decodeSingularBoolField(value: &self.hideWithoutMinprice)
      case 5: try decoder.decodeSingularBoolField(value: &self.useTrustyouRating)
      case 6: try decoder.decodeSingularFloatField(value: &self.lat)
      case 7: try decoder.decodeSingularFloatField(value: &self.lon)
      case 8: try decoder.decodeSingularBoolField(value: &self.rentals)
      case 9: try decoder.decodeSingularBoolField(value: &self.hidePoisWithoutName)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locationsIds.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.locationsIds, fieldNumber: 1)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 2)
    }
    if !self.fields.isEmpty {
      try visitor.visitSingularStringField(value: self.fields, fieldNumber: 3)
    }
    if self.hideWithoutMinprice != false {
      try visitor.visitSingularBoolField(value: self.hideWithoutMinprice, fieldNumber: 4)
    }
    if self.useTrustyouRating != false {
      try visitor.visitSingularBoolField(value: self.useTrustyouRating, fieldNumber: 5)
    }
    if self.lat != 0 {
      try visitor.visitSingularFloatField(value: self.lat, fieldNumber: 6)
    }
    if self.lon != 0 {
      try visitor.visitSingularFloatField(value: self.lon, fieldNumber: 7)
    }
    if self.rentals != false {
      try visitor.visitSingularBoolField(value: self.rentals, fieldNumber: 8)
    }
    if self.hidePoisWithoutName != false {
      try visitor.visitSingularBoolField(value: self.hidePoisWithoutName, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBLocationInfoResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "LocationInfoResponse"

  var locations: Dictionary<UInt32,PBLocation> = [:]

  var pois: Dictionary<UInt32,PBPoi> = [:]

  var districts: Dictionary<UInt32,PBDistrict> = [:]

  var hotels: Dictionary<UInt32,PBHotel> = [:]

  var trustyou: Dictionary<UInt32,PBTrustyou> = [:]

  var hotelsKnownGuests: Dictionary<UInt32,PBKnownGuests> = [:]

  var hotelsAmenities: Dictionary<UInt32,PBAmenity> = [:]

  var hotelsRoomPhotos: Dictionary<UInt32,PBHotelRoomPhoto> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBLocation>.self, value: &self.locations)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBPoi>.self, value: &self.pois)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDistrict>.self, value: &self.districts)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBHotel>.self, value: &self.hotels)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBTrustyou>.self, value: &self.trustyou)
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBKnownGuests>.self, value: &self.hotelsKnownGuests)
      case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBAmenity>.self, value: &self.hotelsAmenities)
      case 9: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBHotelRoomPhoto>.self, value: &self.hotelsRoomPhotos)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locations.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBLocation>.self, value: self.locations, fieldNumber: 1)
    }
    if !self.pois.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBPoi>.self, value: self.pois, fieldNumber: 2)
    }
    if !self.districts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDistrict>.self, value: self.districts, fieldNumber: 3)
    }
    if !self.hotels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBHotel>.self, value: self.hotels, fieldNumber: 4)
    }
    if !self.trustyou.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBTrustyou>.self, value: self.trustyou, fieldNumber: 5)
    }
    if !self.hotelsKnownGuests.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBKnownGuests>.self, value: self.hotelsKnownGuests, fieldNumber: 6)
    }
    if !self.hotelsAmenities.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBAmenity>.self, value: self.hotelsAmenities, fieldNumber: 8)
    }
    if !self.hotelsRoomPhotos.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBHotelRoomPhoto>.self, value: self.hotelsRoomPhotos, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBLocationTopRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "LocationTopRequest"

  var locale: String = String()

  var limit: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.locale)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.limit)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBLocationTopResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "LocationTopResponse"

  var locations: [PBLocation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.locations)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBLocationInfoRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "locations_ids"),
    2: .same(proto: "locale"),
    3: .same(proto: "fields"),
    4: .standard(proto: "hide_without_minprice"),
    5: .standard(proto: "use_trustyou_rating"),
    6: .same(proto: "lat"),
    7: .same(proto: "lon"),
    8: .same(proto: "rentals"),
    9: .standard(proto: "hide_pois_without_name"),
  ]

  func _protobuf_generated_isEqualTo(other: PBLocationInfoRequest) -> Bool {
    if self.locationsIds != other.locationsIds {return false}
    if self.locale != other.locale {return false}
    if self.fields != other.fields {return false}
    if self.hideWithoutMinprice != other.hideWithoutMinprice {return false}
    if self.useTrustyouRating != other.useTrustyouRating {return false}
    if self.lat != other.lat {return false}
    if self.lon != other.lon {return false}
    if self.rentals != other.rentals {return false}
    if self.hidePoisWithoutName != other.hidePoisWithoutName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBLocationInfoResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locations"),
    2: .same(proto: "pois"),
    3: .same(proto: "districts"),
    4: .same(proto: "hotels"),
    5: .same(proto: "trustyou"),
    6: .standard(proto: "hotels_known_guests"),
    8: .standard(proto: "hotels_amenities"),
    9: .standard(proto: "hotels_room_photos"),
  ]

  func _protobuf_generated_isEqualTo(other: PBLocationInfoResponse) -> Bool {
    if self.locations != other.locations {return false}
    if self.pois != other.pois {return false}
    if self.districts != other.districts {return false}
    if self.hotels != other.hotels {return false}
    if self.trustyou != other.trustyou {return false}
    if self.hotelsKnownGuests != other.hotelsKnownGuests {return false}
    if self.hotelsAmenities != other.hotelsAmenities {return false}
    if self.hotelsRoomPhotos != other.hotelsRoomPhotos {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBLocationTopRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locale"),
    2: .same(proto: "limit"),
  ]

  func _protobuf_generated_isEqualTo(other: PBLocationTopRequest) -> Bool {
    if self.locale != other.locale {return false}
    if self.limit != other.limit {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBLocationTopResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locations"),
  ]

  func _protobuf_generated_isEqualTo(other: PBLocationTopResponse) -> Bool {
    if self.locations != other.locations {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
