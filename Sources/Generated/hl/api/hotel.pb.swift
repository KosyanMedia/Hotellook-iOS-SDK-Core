// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/hotel.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBRoomPhotos: SwiftProtobuf.Message {
  static let protoMessageName: String = "RoomPhotos"

  var photosIds: [UInt64] = []

  var count: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.photosIds)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.count)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.photosIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.photosIds, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBHotelRoomPhoto: SwiftProtobuf.Message {
  static let protoMessageName: String = "HotelRoomPhoto"

  var rooms: Dictionary<UInt32,PBRoomPhotos> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBRoomPhotos>.self, value: &self.rooms)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rooms.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBRoomPhotos>.self, value: self.rooms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBHotel: SwiftProtobuf.Message {
  static let protoMessageName: String = "Hotel"

  var roomCount: UInt32 {
    get {return _storage._roomCount}
    set {_uniqueStorage()._roomCount = newValue}
  }

  var checkIn: String {
    get {return _storage._checkIn}
    set {_uniqueStorage()._checkIn = newValue}
  }

  var checkOut: String {
    get {return _storage._checkOut}
    set {_uniqueStorage()._checkOut = newValue}
  }

  var distanceToCenter: UInt32 {
    get {return _storage._distanceToCenter}
    set {_uniqueStorage()._distanceToCenter = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var locationID: UInt32 {
    get {return _storage._locationID}
    set {_uniqueStorage()._locationID = newValue}
  }

  var photosIds: [UInt64] {
    get {return _storage._photosIds}
    set {_uniqueStorage()._photosIds = newValue}
  }

  var minprice: Float {
    get {return _storage._minprice}
    set {_uniqueStorage()._minprice = newValue}
  }

  var propertyType: PBPropertyType {
    get {return _storage._propertyType}
    set {_uniqueStorage()._propertyType = newValue}
  }

  var rating: Float {
    get {return _storage._rating}
    set {_uniqueStorage()._rating = newValue}
  }

  var stars: UInt32 {
    get {return _storage._stars}
    set {_uniqueStorage()._stars = newValue}
  }

  var yearOpened: UInt32 {
    get {return _storage._yearOpened}
    set {_uniqueStorage()._yearOpened = newValue}
  }

  var yearRenovated: UInt32 {
    get {return _storage._yearRenovated}
    set {_uniqueStorage()._yearRenovated = newValue}
  }

  var locationsIds: [UInt32] {
    get {return _storage._locationsIds}
    set {_uniqueStorage()._locationsIds = newValue}
  }

  ///    float median_price = 16;
  ///    uint32 floor_count = 17;
  var popularity2: UInt32 {
    get {return _storage._popularity2}
    set {_uniqueStorage()._popularity2 = newValue}
  }

  var locationsDistances: Dictionary<UInt32,UInt32> {
    get {return _storage._locationsDistances}
    set {_uniqueStorage()._locationsDistances = newValue}
  }

  ///reviews_count - total count of reviews, which we can display
  var reviewsCount: UInt32 {
    get {return _storage._reviewsCount}
    set {_uniqueStorage()._reviewsCount = newValue}
  }

  var poisDistances: Dictionary<UInt32,UInt32> {
    get {return _storage._poisDistances}
    set {_uniqueStorage()._poisDistances = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var location: PBCoords {
    get {return _storage._location ?? PBCoords()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_storage._location = nil}

  var photosByRoomType: Dictionary<UInt32,PBRoomPhotos> {
    get {return _storage._photosByRoomType}
    set {_uniqueStorage()._photosByRoomType = newValue}
  }

  var districtsIds: [UInt32] {
    get {return _storage._districtsIds}
    set {_uniqueStorage()._districtsIds = newValue}
  }

  ///    string chain = 26;
  var scoring: Dictionary<String,UInt32> {
    get {return _storage._scoring}
    set {_uniqueStorage()._scoring = newValue}
  }

  var id: UInt32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var popularity: UInt32 {
    get {return _storage._popularity}
    set {_uniqueStorage()._popularity = newValue}
  }

  var amenitiesv2: PBHotel.AmenitiesV2 {
    get {return _storage._amenitiesv2 ?? PBHotel.AmenitiesV2()}
    set {_uniqueStorage()._amenitiesv2 = newValue}
  }
  /// Returns true if `amenitiesv2` has been explicitly set.
  var hasAmenitiesv2: Bool {return _storage._amenitiesv2 != nil}
  /// Clears the value of `amenitiesv2`. Subsequent reads from it will return its default value.
  mutating func clearAmenitiesv2() {_storage._amenitiesv2 = nil}

  var latinName: String {
    get {return _storage._latinName}
    set {_uniqueStorage()._latinName = newValue}
  }

  ///DEPRECATED: use amenities
  ///repeated uint32 filters = 32;
  var isRentals: Bool {
    get {return _storage._isRentals}
    set {_uniqueStorage()._isRentals = newValue}
  }

  var hasRentals_p: Bool {
    get {return _storage._hasRentals_p}
    set {_uniqueStorage()._hasRentals_p = newValue}
  }

  var photosCount: UInt32 {
    get {return _storage._photosCount}
    set {_uniqueStorage()._photosCount = newValue}
  }

  var latinFullName: String {
    get {return _storage._latinFullName}
    set {_uniqueStorage()._latinFullName = newValue}
  }

  var fullName: String {
    get {return _storage._fullName}
    set {_uniqueStorage()._fullName = newValue}
  }

  var propertyTypeID: Int32 {
    get {return _storage._propertyTypeID}
    set {_uniqueStorage()._propertyTypeID = newValue}
  }

  var amenities: [UInt32] {
    get {return _storage._amenities}
    set {_uniqueStorage()._amenities = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct AmenitiesV2: SwiftProtobuf.Message {
    static let protoMessageName: String = PBHotel.protoMessageName + ".AmenitiesV2"

    var categories: Dictionary<String,PBHotel.AmenitiesV2.AmenitiesCategory> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Value: SwiftProtobuf.Message {
      static let protoMessageName: String = PBHotel.AmenitiesV2.protoMessageName + ".Value"

      var slug: String = String()

      var price: String = String()

      var name: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &self.slug)
          case 2: try decoder.decodeSingularStringField(value: &self.price)
          case 3: try decoder.decodeSingularStringField(value: &self.name)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.slug.isEmpty {
          try visitor.visitSingularStringField(value: self.slug, fieldNumber: 1)
        }
        if !self.price.isEmpty {
          try visitor.visitSingularStringField(value: self.price, fieldNumber: 2)
        }
        if !self.name.isEmpty {
          try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    struct AmenitiesCategory: SwiftProtobuf.Message {
      static let protoMessageName: String = PBHotel.AmenitiesV2.protoMessageName + ".AmenitiesCategory"

      var values: [PBHotel.AmenitiesV2.Value] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeRepeatedMessageField(value: &self.values)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.values.isEmpty {
          try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBHotel.AmenitiesV2.AmenitiesCategory>.self, value: &self.categories)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.categories.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBHotel.AmenitiesV2.AmenitiesCategory>.self, value: self.categories, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._roomCount)
        case 2: try decoder.decodeSingularStringField(value: &_storage._checkIn)
        case 3: try decoder.decodeSingularStringField(value: &_storage._checkOut)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._distanceToCenter)
        case 5: try decoder.decodeSingularStringField(value: &_storage._address)
        case 6: try decoder.decodeSingularStringField(value: &_storage._name)
        case 7: try decoder.decodeSingularUInt32Field(value: &_storage._locationID)
        case 8: try decoder.decodeRepeatedUInt64Field(value: &_storage._photosIds)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._minprice)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._propertyType)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._rating)
        case 12: try decoder.decodeSingularUInt32Field(value: &_storage._stars)
        case 13: try decoder.decodeSingularUInt32Field(value: &_storage._yearOpened)
        case 14: try decoder.decodeSingularUInt32Field(value: &_storage._yearRenovated)
        case 15: try decoder.decodeRepeatedUInt32Field(value: &_storage._locationsIds)
        case 18: try decoder.decodeSingularUInt32Field(value: &_storage._popularity2)
        case 19: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._locationsDistances)
        case 20: try decoder.decodeSingularUInt32Field(value: &_storage._reviewsCount)
        case 21: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._poisDistances)
        case 22: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 24: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBRoomPhotos>.self, value: &_storage._photosByRoomType)
        case 25: try decoder.decodeRepeatedUInt32Field(value: &_storage._districtsIds)
        case 27: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._scoring)
        case 28: try decoder.decodeSingularUInt32Field(value: &_storage._id)
        case 29: try decoder.decodeSingularUInt32Field(value: &_storage._popularity)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._amenitiesv2)
        case 31: try decoder.decodeSingularStringField(value: &_storage._latinName)
        case 33: try decoder.decodeSingularBoolField(value: &_storage._isRentals)
        case 34: try decoder.decodeSingularBoolField(value: &_storage._hasRentals_p)
        case 35: try decoder.decodeSingularUInt32Field(value: &_storage._photosCount)
        case 36: try decoder.decodeSingularStringField(value: &_storage._latinFullName)
        case 37: try decoder.decodeSingularStringField(value: &_storage._fullName)
        case 38: try decoder.decodeSingularInt32Field(value: &_storage._propertyTypeID)
        case 39: try decoder.decodeRepeatedUInt32Field(value: &_storage._amenities)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._roomCount != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._roomCount, fieldNumber: 1)
      }
      if !_storage._checkIn.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkIn, fieldNumber: 2)
      }
      if !_storage._checkOut.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkOut, fieldNumber: 3)
      }
      if _storage._distanceToCenter != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._distanceToCenter, fieldNumber: 4)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 5)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 6)
      }
      if _storage._locationID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._locationID, fieldNumber: 7)
      }
      if !_storage._photosIds.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._photosIds, fieldNumber: 8)
      }
      if _storage._minprice != 0 {
        try visitor.visitSingularFloatField(value: _storage._minprice, fieldNumber: 9)
      }
      if _storage._propertyType != .other {
        try visitor.visitSingularEnumField(value: _storage._propertyType, fieldNumber: 10)
      }
      if _storage._rating != 0 {
        try visitor.visitSingularFloatField(value: _storage._rating, fieldNumber: 11)
      }
      if _storage._stars != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._stars, fieldNumber: 12)
      }
      if _storage._yearOpened != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._yearOpened, fieldNumber: 13)
      }
      if _storage._yearRenovated != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._yearRenovated, fieldNumber: 14)
      }
      if !_storage._locationsIds.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._locationsIds, fieldNumber: 15)
      }
      if _storage._popularity2 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._popularity2, fieldNumber: 18)
      }
      if !_storage._locationsDistances.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._locationsDistances, fieldNumber: 19)
      }
      if _storage._reviewsCount != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._reviewsCount, fieldNumber: 20)
      }
      if !_storage._poisDistances.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._poisDistances, fieldNumber: 21)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 22)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if !_storage._photosByRoomType.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBRoomPhotos>.self, value: _storage._photosByRoomType, fieldNumber: 24)
      }
      if !_storage._districtsIds.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._districtsIds, fieldNumber: 25)
      }
      if !_storage._scoring.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._scoring, fieldNumber: 27)
      }
      if _storage._id != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._id, fieldNumber: 28)
      }
      if _storage._popularity != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._popularity, fieldNumber: 29)
      }
      if let v = _storage._amenitiesv2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if !_storage._latinName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._latinName, fieldNumber: 31)
      }
      if _storage._isRentals != false {
        try visitor.visitSingularBoolField(value: _storage._isRentals, fieldNumber: 33)
      }
      if _storage._hasRentals_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasRentals_p, fieldNumber: 34)
      }
      if _storage._photosCount != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._photosCount, fieldNumber: 35)
      }
      if !_storage._latinFullName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._latinFullName, fieldNumber: 36)
      }
      if !_storage._fullName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fullName, fieldNumber: 37)
      }
      if _storage._propertyTypeID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._propertyTypeID, fieldNumber: 38)
      }
      if !_storage._amenities.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._amenities, fieldNumber: 39)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PBKnownGuests: SwiftProtobuf.Message {
  static let protoMessageName: String = "KnownGuests"

  var rooms: [PBKnownGuests.Room] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Room: SwiftProtobuf.Message {
    static let protoMessageName: String = PBKnownGuests.protoMessageName + ".Room"

    var adults: UInt32 = 0

    var children: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self.adults)
        case 2: try decoder.decodeSingularUInt32Field(value: &self.children)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.adults != 0 {
        try visitor.visitSingularUInt32Field(value: self.adults, fieldNumber: 1)
      }
      if self.children != 0 {
        try visitor.visitSingularUInt32Field(value: self.children, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rooms)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rooms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rooms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBAmenity: SwiftProtobuf.Message {
  static let protoMessageName: String = "Amenity"

  var slug: String = String()

  var name: String = String()

  var category: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.slug)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.category)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.slug.isEmpty {
      try visitor.visitSingularStringField(value: self.slug, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBRoomPhotos: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "photos_ids"),
    2: .same(proto: "count"),
  ]

  func _protobuf_generated_isEqualTo(other: PBRoomPhotos) -> Bool {
    if self.photosIds != other.photosIds {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotelRoomPhoto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rooms"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotelRoomPhoto) -> Bool {
    if self.rooms != other.rooms {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_count"),
    2: .standard(proto: "check_in"),
    3: .standard(proto: "check_out"),
    4: .standard(proto: "distance_to_center"),
    5: .same(proto: "address"),
    6: .same(proto: "name"),
    7: .standard(proto: "location_id"),
    8: .standard(proto: "photos_ids"),
    9: .same(proto: "minprice"),
    10: .standard(proto: "property_type"),
    11: .same(proto: "rating"),
    12: .same(proto: "stars"),
    13: .standard(proto: "year_opened"),
    14: .standard(proto: "year_renovated"),
    15: .standard(proto: "locations_ids"),
    18: .same(proto: "popularity2"),
    19: .standard(proto: "locations_distances"),
    20: .standard(proto: "reviews_count"),
    21: .standard(proto: "pois_distances"),
    22: .same(proto: "description"),
    23: .same(proto: "location"),
    24: .standard(proto: "photos_by_room_type"),
    25: .standard(proto: "districts_ids"),
    27: .same(proto: "scoring"),
    28: .same(proto: "id"),
    29: .same(proto: "popularity"),
    30: .same(proto: "amenitiesv2"),
    31: .standard(proto: "latin_name"),
    33: .standard(proto: "is_rentals"),
    34: .standard(proto: "has_rentals"),
    35: .standard(proto: "photos_count"),
    36: .standard(proto: "latin_full_name"),
    37: .standard(proto: "full_name"),
    38: .standard(proto: "property_type_id"),
    39: .same(proto: "amenities"),
  ]

  fileprivate class _StorageClass {
    var _roomCount: UInt32 = 0
    var _checkIn: String = String()
    var _checkOut: String = String()
    var _distanceToCenter: UInt32 = 0
    var _address: String = String()
    var _name: String = String()
    var _locationID: UInt32 = 0
    var _photosIds: [UInt64] = []
    var _minprice: Float = 0
    var _propertyType: PBPropertyType = .other
    var _rating: Float = 0
    var _stars: UInt32 = 0
    var _yearOpened: UInt32 = 0
    var _yearRenovated: UInt32 = 0
    var _locationsIds: [UInt32] = []
    var _popularity2: UInt32 = 0
    var _locationsDistances: Dictionary<UInt32,UInt32> = [:]
    var _reviewsCount: UInt32 = 0
    var _poisDistances: Dictionary<UInt32,UInt32> = [:]
    var _description_p: String = String()
    var _location: PBCoords? = nil
    var _photosByRoomType: Dictionary<UInt32,PBRoomPhotos> = [:]
    var _districtsIds: [UInt32] = []
    var _scoring: Dictionary<String,UInt32> = [:]
    var _id: UInt32 = 0
    var _popularity: UInt32 = 0
    var _amenitiesv2: PBHotel.AmenitiesV2? = nil
    var _latinName: String = String()
    var _isRentals: Bool = false
    var _hasRentals_p: Bool = false
    var _photosCount: UInt32 = 0
    var _latinFullName: String = String()
    var _fullName: String = String()
    var _propertyTypeID: Int32 = 0
    var _amenities: [UInt32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _roomCount = source._roomCount
      _checkIn = source._checkIn
      _checkOut = source._checkOut
      _distanceToCenter = source._distanceToCenter
      _address = source._address
      _name = source._name
      _locationID = source._locationID
      _photosIds = source._photosIds
      _minprice = source._minprice
      _propertyType = source._propertyType
      _rating = source._rating
      _stars = source._stars
      _yearOpened = source._yearOpened
      _yearRenovated = source._yearRenovated
      _locationsIds = source._locationsIds
      _popularity2 = source._popularity2
      _locationsDistances = source._locationsDistances
      _reviewsCount = source._reviewsCount
      _poisDistances = source._poisDistances
      _description_p = source._description_p
      _location = source._location
      _photosByRoomType = source._photosByRoomType
      _districtsIds = source._districtsIds
      _scoring = source._scoring
      _id = source._id
      _popularity = source._popularity
      _amenitiesv2 = source._amenitiesv2
      _latinName = source._latinName
      _isRentals = source._isRentals
      _hasRentals_p = source._hasRentals_p
      _photosCount = source._photosCount
      _latinFullName = source._latinFullName
      _fullName = source._fullName
      _propertyTypeID = source._propertyTypeID
      _amenities = source._amenities
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBHotel) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._roomCount != other_storage._roomCount {return false}
        if _storage._checkIn != other_storage._checkIn {return false}
        if _storage._checkOut != other_storage._checkOut {return false}
        if _storage._distanceToCenter != other_storage._distanceToCenter {return false}
        if _storage._address != other_storage._address {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._locationID != other_storage._locationID {return false}
        if _storage._photosIds != other_storage._photosIds {return false}
        if _storage._minprice != other_storage._minprice {return false}
        if _storage._propertyType != other_storage._propertyType {return false}
        if _storage._rating != other_storage._rating {return false}
        if _storage._stars != other_storage._stars {return false}
        if _storage._yearOpened != other_storage._yearOpened {return false}
        if _storage._yearRenovated != other_storage._yearRenovated {return false}
        if _storage._locationsIds != other_storage._locationsIds {return false}
        if _storage._popularity2 != other_storage._popularity2 {return false}
        if _storage._locationsDistances != other_storage._locationsDistances {return false}
        if _storage._reviewsCount != other_storage._reviewsCount {return false}
        if _storage._poisDistances != other_storage._poisDistances {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._location != other_storage._location {return false}
        if _storage._photosByRoomType != other_storage._photosByRoomType {return false}
        if _storage._districtsIds != other_storage._districtsIds {return false}
        if _storage._scoring != other_storage._scoring {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._popularity != other_storage._popularity {return false}
        if _storage._amenitiesv2 != other_storage._amenitiesv2 {return false}
        if _storage._latinName != other_storage._latinName {return false}
        if _storage._isRentals != other_storage._isRentals {return false}
        if _storage._hasRentals_p != other_storage._hasRentals_p {return false}
        if _storage._photosCount != other_storage._photosCount {return false}
        if _storage._latinFullName != other_storage._latinFullName {return false}
        if _storage._fullName != other_storage._fullName {return false}
        if _storage._propertyTypeID != other_storage._propertyTypeID {return false}
        if _storage._amenities != other_storage._amenities {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotel.AmenitiesV2: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "categories"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotel.AmenitiesV2) -> Bool {
    if self.categories != other.categories {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotel.AmenitiesV2.Value: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slug"),
    2: .same(proto: "price"),
    3: .same(proto: "name"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotel.AmenitiesV2.Value) -> Bool {
    if self.slug != other.slug {return false}
    if self.price != other.price {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotel.AmenitiesV2.AmenitiesCategory: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotel.AmenitiesV2.AmenitiesCategory) -> Bool {
    if self.values != other.values {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBKnownGuests: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rooms"),
  ]

  func _protobuf_generated_isEqualTo(other: PBKnownGuests) -> Bool {
    if self.rooms != other.rooms {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBKnownGuests.Room: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adults"),
    2: .same(proto: "children"),
  ]

  func _protobuf_generated_isEqualTo(other: PBKnownGuests.Room) -> Bool {
    if self.adults != other.adults {return false}
    if self.children != other.children {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBAmenity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slug"),
    2: .same(proto: "name"),
    3: .same(proto: "category"),
  ]

  func _protobuf_generated_isEqualTo(other: PBAmenity) -> Bool {
    if self.slug != other.slug {return false}
    if self.name != other.name {return false}
    if self.category != other.category {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
