// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/trustyou.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBTrustyou: SwiftProtobuf.Message {
  static let protoMessageName: String = "Trustyou"

  var goodToKnow: [PBTrustyou.GoodToKnow] {
    get {return _storage._goodToKnow}
    set {_uniqueStorage()._goodToKnow = newValue}
  }

  var sentimentScoreList: [PBTrustyou.SentimentScoreList] {
    get {return _storage._sentimentScoreList}
    set {_uniqueStorage()._sentimentScoreList = newValue}
  }

  ///    repeated HotelType hotel_type = 3;
  ///    repeated Badge badges = 4;
  ///    repeated GenderTalks gender_talks = 5;
  ///    repeated AltSummary alt_summary = 6;
  var languageSplit: Dictionary<String,PBTrustyou.LanguageSplit> {
    get {return _storage._languageSplit}
    set {_uniqueStorage()._languageSplit = newValue}
  }

  var tripTypeSplit: PBTrustyou.TripTypeSplit {
    get {return _storage._tripTypeSplit ?? PBTrustyou.TripTypeSplit()}
    set {_uniqueStorage()._tripTypeSplit = newValue}
  }
  /// Returns true if `tripTypeSplit` has been explicitly set.
  var hasTripTypeSplit: Bool {return _storage._tripTypeSplit != nil}
  /// Clears the value of `tripTypeSplit`. Subsequent reads from it will return its default value.
  mutating func clearTripTypeSplit() {_storage._tripTypeSplit = nil}

  var summary: PBTrustyou.Summary {
    get {return _storage._summary ?? PBTrustyou.Summary()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  mutating func clearSummary() {_storage._summary = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Snippet: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".Snippet"

    var text: String = String()

    var confidence: Float = 0

    var categoryIDList: [String] = []

    var sentiment: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.text)
        case 2: try decoder.decodeSingularFloatField(value: &self.confidence)
        case 3: try decoder.decodeRepeatedStringField(value: &self.categoryIDList)
        case 4: try decoder.decodeSingularStringField(value: &self.sentiment)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
      }
      if self.confidence != 0 {
        try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 2)
      }
      if !self.categoryIDList.isEmpty {
        try visitor.visitRepeatedStringField(value: self.categoryIDList, fieldNumber: 3)
      }
      if !self.sentiment.isEmpty {
        try visitor.visitSingularStringField(value: self.sentiment, fieldNumber: 4)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct SubCategoryList: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".SubCategoryList"

    var count: Float = 0

    var ratio: String = String()

    var score: UInt32 = 0

    var reviewCount: UInt32 = 0

    var categoryName: String = String()

    var text: String = String()

    var relevance: Float = 0

    var sentiment: String = String()

    var shortText: String = String()

    var categoryID: String = String()

    var highlightList: [PBTrustyou.Snippet] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &self.count)
        case 2: try decoder.decodeSingularStringField(value: &self.ratio)
        case 3: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 4: try decoder.decodeSingularUInt32Field(value: &self.reviewCount)
        case 5: try decoder.decodeSingularStringField(value: &self.categoryName)
        case 6: try decoder.decodeSingularStringField(value: &self.text)
        case 7: try decoder.decodeSingularFloatField(value: &self.relevance)
        case 8: try decoder.decodeSingularStringField(value: &self.sentiment)
        case 9: try decoder.decodeSingularStringField(value: &self.shortText)
        case 10: try decoder.decodeSingularStringField(value: &self.categoryID)
        case 11: try decoder.decodeRepeatedMessageField(value: &self.highlightList)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.count != 0 {
        try visitor.visitSingularFloatField(value: self.count, fieldNumber: 1)
      }
      if !self.ratio.isEmpty {
        try visitor.visitSingularStringField(value: self.ratio, fieldNumber: 2)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 3)
      }
      if self.reviewCount != 0 {
        try visitor.visitSingularUInt32Field(value: self.reviewCount, fieldNumber: 4)
      }
      if !self.categoryName.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryName, fieldNumber: 5)
      }
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 6)
      }
      if self.relevance != 0 {
        try visitor.visitSingularFloatField(value: self.relevance, fieldNumber: 7)
      }
      if !self.sentiment.isEmpty {
        try visitor.visitSingularStringField(value: self.sentiment, fieldNumber: 8)
      }
      if !self.shortText.isEmpty {
        try visitor.visitSingularStringField(value: self.shortText, fieldNumber: 9)
      }
      if !self.categoryID.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 10)
      }
      if !self.highlightList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.highlightList, fieldNumber: 11)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct CategoryList: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".CategoryList"

    var text: String = String()

    var score: UInt32 = 0

    var categoryID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.text)
        case 2: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 3: try decoder.decodeSingularStringField(value: &self.categoryID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 2)
      }
      if !self.categoryID.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct BadgeData: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".BadgeData"

    var score: UInt32 = 0

    var popularity: Float = 0

    var categoryID: String = String()

    var categoryName: String = String()

    var globalPopularity: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 2: try decoder.decodeSingularFloatField(value: &self.popularity)
        case 3: try decoder.decodeSingularStringField(value: &self.categoryID)
        case 4: try decoder.decodeSingularStringField(value: &self.categoryName)
        case 5: try decoder.decodeSingularFloatField(value: &self.globalPopularity)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 1)
      }
      if self.popularity != 0 {
        try visitor.visitSingularFloatField(value: self.popularity, fieldNumber: 2)
      }
      if !self.categoryID.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 3)
      }
      if !self.categoryName.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryName, fieldNumber: 4)
      }
      if self.globalPopularity != 0 {
        try visitor.visitSingularFloatField(value: self.globalPopularity, fieldNumber: 5)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct GoodToKnow: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".GoodToKnow"

    var count: Float = 0

    var ratio: String = String()

    var score: UInt32 = 0

    var reviewCount: UInt32 = 0

    var categoryName: String = String()

    var text: String = String()

    var relevance: Float = 0

    var sentiment: String = String()

    var shortText: String = String()

    var categoryID: String = String()

    var highlightList: [PBTrustyou.Snippet] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &self.count)
        case 2: try decoder.decodeSingularStringField(value: &self.ratio)
        case 3: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 4: try decoder.decodeSingularUInt32Field(value: &self.reviewCount)
        case 5: try decoder.decodeSingularStringField(value: &self.categoryName)
        case 6: try decoder.decodeSingularStringField(value: &self.text)
        case 7: try decoder.decodeSingularFloatField(value: &self.relevance)
        case 8: try decoder.decodeSingularStringField(value: &self.sentiment)
        case 9: try decoder.decodeSingularStringField(value: &self.shortText)
        case 10: try decoder.decodeSingularStringField(value: &self.categoryID)
        case 11: try decoder.decodeRepeatedMessageField(value: &self.highlightList)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.count != 0 {
        try visitor.visitSingularFloatField(value: self.count, fieldNumber: 1)
      }
      if !self.ratio.isEmpty {
        try visitor.visitSingularStringField(value: self.ratio, fieldNumber: 2)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 3)
      }
      if self.reviewCount != 0 {
        try visitor.visitSingularUInt32Field(value: self.reviewCount, fieldNumber: 4)
      }
      if !self.categoryName.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryName, fieldNumber: 5)
      }
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 6)
      }
      if self.relevance != 0 {
        try visitor.visitSingularFloatField(value: self.relevance, fieldNumber: 7)
      }
      if !self.sentiment.isEmpty {
        try visitor.visitSingularStringField(value: self.sentiment, fieldNumber: 8)
      }
      if !self.shortText.isEmpty {
        try visitor.visitSingularStringField(value: self.shortText, fieldNumber: 9)
      }
      if !self.categoryID.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 10)
      }
      if !self.highlightList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.highlightList, fieldNumber: 11)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct SentimentScoreList: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".SentimentScoreList"

    var count: Float = 0

    var ratio: String = String()

    var score: UInt32 = 0

    var reviewCount: UInt32 = 0

    var categoryName: String = String()

    var text: String = String()

    var relevance: Float = 0

    var sentiment: String = String()

    var shortText: String = String()

    var categoryID: String = String()

    var highlightList: [PBTrustyou.Snippet] = []

    var subCategoryList: [PBTrustyou.SubCategoryList] = []

    var summarySentenceList: [PBTrustyou.Snippet] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &self.count)
        case 2: try decoder.decodeSingularStringField(value: &self.ratio)
        case 3: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 4: try decoder.decodeSingularUInt32Field(value: &self.reviewCount)
        case 5: try decoder.decodeSingularStringField(value: &self.categoryName)
        case 6: try decoder.decodeSingularStringField(value: &self.text)
        case 7: try decoder.decodeSingularFloatField(value: &self.relevance)
        case 8: try decoder.decodeSingularStringField(value: &self.sentiment)
        case 9: try decoder.decodeSingularStringField(value: &self.shortText)
        case 10: try decoder.decodeSingularStringField(value: &self.categoryID)
        case 11: try decoder.decodeRepeatedMessageField(value: &self.highlightList)
        case 12: try decoder.decodeRepeatedMessageField(value: &self.subCategoryList)
        case 13: try decoder.decodeRepeatedMessageField(value: &self.summarySentenceList)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.count != 0 {
        try visitor.visitSingularFloatField(value: self.count, fieldNumber: 1)
      }
      if !self.ratio.isEmpty {
        try visitor.visitSingularStringField(value: self.ratio, fieldNumber: 2)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 3)
      }
      if self.reviewCount != 0 {
        try visitor.visitSingularUInt32Field(value: self.reviewCount, fieldNumber: 4)
      }
      if !self.categoryName.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryName, fieldNumber: 5)
      }
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 6)
      }
      if self.relevance != 0 {
        try visitor.visitSingularFloatField(value: self.relevance, fieldNumber: 7)
      }
      if !self.sentiment.isEmpty {
        try visitor.visitSingularStringField(value: self.sentiment, fieldNumber: 8)
      }
      if !self.shortText.isEmpty {
        try visitor.visitSingularStringField(value: self.shortText, fieldNumber: 9)
      }
      if !self.categoryID.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 10)
      }
      if !self.highlightList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.highlightList, fieldNumber: 11)
      }
      if !self.subCategoryList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.subCategoryList, fieldNumber: 12)
      }
      if !self.summarySentenceList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.summarySentenceList, fieldNumber: 13)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct HotelType: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".HotelType"

    var count: Float = 0

    var ratio: String = String()

    var score: UInt32 = 0

    var reviewCount: UInt32 = 0

    var categoryName: String = String()

    var text: String = String()

    var relevance: Float = 0

    var sentiment: String = String()

    var shortText: String = String()

    var categoryID: String = String()

    var highlightList: [PBTrustyou.Snippet] = []

    var subCategoryList: [PBTrustyou.SubCategoryList] = []

    var globalPopularity: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &self.count)
        case 2: try decoder.decodeSingularStringField(value: &self.ratio)
        case 3: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 4: try decoder.decodeSingularUInt32Field(value: &self.reviewCount)
        case 5: try decoder.decodeSingularStringField(value: &self.categoryName)
        case 6: try decoder.decodeSingularStringField(value: &self.text)
        case 7: try decoder.decodeSingularFloatField(value: &self.relevance)
        case 8: try decoder.decodeSingularStringField(value: &self.sentiment)
        case 9: try decoder.decodeSingularStringField(value: &self.shortText)
        case 10: try decoder.decodeSingularStringField(value: &self.categoryID)
        case 11: try decoder.decodeRepeatedMessageField(value: &self.highlightList)
        case 12: try decoder.decodeRepeatedMessageField(value: &self.subCategoryList)
        case 13: try decoder.decodeSingularFloatField(value: &self.globalPopularity)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.count != 0 {
        try visitor.visitSingularFloatField(value: self.count, fieldNumber: 1)
      }
      if !self.ratio.isEmpty {
        try visitor.visitSingularStringField(value: self.ratio, fieldNumber: 2)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 3)
      }
      if self.reviewCount != 0 {
        try visitor.visitSingularUInt32Field(value: self.reviewCount, fieldNumber: 4)
      }
      if !self.categoryName.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryName, fieldNumber: 5)
      }
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 6)
      }
      if self.relevance != 0 {
        try visitor.visitSingularFloatField(value: self.relevance, fieldNumber: 7)
      }
      if !self.sentiment.isEmpty {
        try visitor.visitSingularStringField(value: self.sentiment, fieldNumber: 8)
      }
      if !self.shortText.isEmpty {
        try visitor.visitSingularStringField(value: self.shortText, fieldNumber: 9)
      }
      if !self.categoryID.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 10)
      }
      if !self.highlightList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.highlightList, fieldNumber: 11)
      }
      if !self.subCategoryList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.subCategoryList, fieldNumber: 12)
      }
      if self.globalPopularity != 0 {
        try visitor.visitSingularFloatField(value: self.globalPopularity, fieldNumber: 13)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Badge: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".Badge"

    var text: String {
      get {return _storage._text}
      set {_uniqueStorage()._text = newValue}
    }

    var subtext: String {
      get {return _storage._subtext}
      set {_uniqueStorage()._subtext = newValue}
    }

    var snippets: [PBTrustyou.Snippet] {
      get {return _storage._snippets}
      set {_uniqueStorage()._snippets = newValue}
    }

    var badgeType: String {
      get {return _storage._badgeType}
      set {_uniqueStorage()._badgeType = newValue}
    }

    var badgeData: PBTrustyou.BadgeData {
      get {return _storage._badgeData ?? PBTrustyou.BadgeData()}
      set {_uniqueStorage()._badgeData = newValue}
    }
    /// Returns true if `badgeData` has been explicitly set.
    var hasBadgeData: Bool {return _storage._badgeData != nil}
    /// Clears the value of `badgeData`. Subsequent reads from it will return its default value.
    mutating func clearBadgeData() {_storage._badgeData = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &_storage._text)
          case 2: try decoder.decodeSingularStringField(value: &_storage._subtext)
          case 3: try decoder.decodeRepeatedMessageField(value: &_storage._snippets)
          case 4: try decoder.decodeSingularStringField(value: &_storage._badgeType)
          case 5: try decoder.decodeSingularMessageField(value: &_storage._badgeData)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if !_storage._text.isEmpty {
          try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 1)
        }
        if !_storage._subtext.isEmpty {
          try visitor.visitSingularStringField(value: _storage._subtext, fieldNumber: 2)
        }
        if !_storage._snippets.isEmpty {
          try visitor.visitRepeatedMessageField(value: _storage._snippets, fieldNumber: 3)
        }
        if !_storage._badgeType.isEmpty {
          try visitor.visitSingularStringField(value: _storage._badgeType, fieldNumber: 4)
        }
        if let v = _storage._badgeData {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct GenderTalks: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".GenderTalks"

    var count: Float = 0

    var ratio: String = String()

    var score: UInt32 = 0

    var text: String = String()

    var gender: String = String()

    var relevance: Float = 0

    var sentiment: String = String()

    var shortText: String = String()

    var categoryID: String = String()

    var reviewCount: UInt32 = 0

    var categoryName: String = String()

    var highlightList: [PBTrustyou.Snippet] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &self.count)
        case 2: try decoder.decodeSingularStringField(value: &self.ratio)
        case 3: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 4: try decoder.decodeSingularStringField(value: &self.text)
        case 5: try decoder.decodeSingularStringField(value: &self.gender)
        case 6: try decoder.decodeSingularFloatField(value: &self.relevance)
        case 7: try decoder.decodeSingularStringField(value: &self.sentiment)
        case 8: try decoder.decodeSingularStringField(value: &self.shortText)
        case 9: try decoder.decodeSingularStringField(value: &self.categoryID)
        case 10: try decoder.decodeSingularUInt32Field(value: &self.reviewCount)
        case 11: try decoder.decodeSingularStringField(value: &self.categoryName)
        case 12: try decoder.decodeRepeatedMessageField(value: &self.highlightList)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.count != 0 {
        try visitor.visitSingularFloatField(value: self.count, fieldNumber: 1)
      }
      if !self.ratio.isEmpty {
        try visitor.visitSingularStringField(value: self.ratio, fieldNumber: 2)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 3)
      }
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
      }
      if !self.gender.isEmpty {
        try visitor.visitSingularStringField(value: self.gender, fieldNumber: 5)
      }
      if self.relevance != 0 {
        try visitor.visitSingularFloatField(value: self.relevance, fieldNumber: 6)
      }
      if !self.sentiment.isEmpty {
        try visitor.visitSingularStringField(value: self.sentiment, fieldNumber: 7)
      }
      if !self.shortText.isEmpty {
        try visitor.visitSingularStringField(value: self.shortText, fieldNumber: 8)
      }
      if !self.categoryID.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryID, fieldNumber: 9)
      }
      if self.reviewCount != 0 {
        try visitor.visitSingularUInt32Field(value: self.reviewCount, fieldNumber: 10)
      }
      if !self.categoryName.isEmpty {
        try visitor.visitSingularStringField(value: self.categoryName, fieldNumber: 11)
      }
      if !self.highlightList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.highlightList, fieldNumber: 12)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct AltSummary: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".AltSummary"

    var text: String = String()

    var score: UInt32 = 0

    var popularity: Float = 0

    var categoryList: [PBTrustyou.CategoryList] = []

    var globalPopularity: Float = 0

    var scoreDescription: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.text)
        case 2: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 3: try decoder.decodeSingularFloatField(value: &self.popularity)
        case 4: try decoder.decodeRepeatedMessageField(value: &self.categoryList)
        case 5: try decoder.decodeSingularFloatField(value: &self.globalPopularity)
        case 6: try decoder.decodeSingularStringField(value: &self.scoreDescription)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 2)
      }
      if self.popularity != 0 {
        try visitor.visitSingularFloatField(value: self.popularity, fieldNumber: 3)
      }
      if !self.categoryList.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.categoryList, fieldNumber: 4)
      }
      if self.globalPopularity != 0 {
        try visitor.visitSingularFloatField(value: self.globalPopularity, fieldNumber: 5)
      }
      if !self.scoreDescription.isEmpty {
        try visitor.visitSingularStringField(value: self.scoreDescription, fieldNumber: 6)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Summary: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".Summary"

    var reviewsCount: UInt32 = 0

    var score: UInt32 = 0

    var popularity: UInt32 = 0

    ///        string ratio = 5;
    var text: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self.reviewsCount)
        case 2: try decoder.decodeSingularUInt32Field(value: &self.score)
        case 3: try decoder.decodeSingularUInt32Field(value: &self.popularity)
        case 4: try decoder.decodeSingularStringField(value: &self.text)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.reviewsCount != 0 {
        try visitor.visitSingularUInt32Field(value: self.reviewsCount, fieldNumber: 1)
      }
      if self.score != 0 {
        try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 2)
      }
      if self.popularity != 0 {
        try visitor.visitSingularUInt32Field(value: self.popularity, fieldNumber: 3)
      }
      if !self.text.isEmpty {
        try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct LanguageSplit: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".LanguageSplit"

    ///        map<string, uint32> trip_type_split = 2;
    var percentage: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &self.percentage)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.percentage != 0 {
        try visitor.visitSingularUInt32Field(value: self.percentage, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TripTypeSplit: SwiftProtobuf.Message {
    static let protoMessageName: String = PBTrustyou.protoMessageName + ".TripTypeSplit"

    var tripTypeSplit: Dictionary<String,UInt32> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: &self.tripTypeSplit)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.tripTypeSplit.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufUInt32>.self, value: self.tripTypeSplit, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._goodToKnow)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._sentimentScoreList)
        case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBTrustyou.LanguageSplit>.self, value: &_storage._languageSplit)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._tripTypeSplit)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._summary)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._goodToKnow.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._goodToKnow, fieldNumber: 1)
      }
      if !_storage._sentimentScoreList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sentimentScoreList, fieldNumber: 2)
      }
      if !_storage._languageSplit.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBTrustyou.LanguageSplit>.self, value: _storage._languageSplit, fieldNumber: 7)
      }
      if let v = _storage._tripTypeSplit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._summary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBTrustyou: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "good_to_know"),
    2: .standard(proto: "sentiment_score_list"),
    7: .standard(proto: "language_split"),
    8: .standard(proto: "trip_type_split"),
    9: .same(proto: "summary"),
  ]

  fileprivate class _StorageClass {
    var _goodToKnow: [PBTrustyou.GoodToKnow] = []
    var _sentimentScoreList: [PBTrustyou.SentimentScoreList] = []
    var _languageSplit: Dictionary<String,PBTrustyou.LanguageSplit> = [:]
    var _tripTypeSplit: PBTrustyou.TripTypeSplit? = nil
    var _summary: PBTrustyou.Summary? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _goodToKnow = source._goodToKnow
      _sentimentScoreList = source._sentimentScoreList
      _languageSplit = source._languageSplit
      _tripTypeSplit = source._tripTypeSplit
      _summary = source._summary
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBTrustyou) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._goodToKnow != other_storage._goodToKnow {return false}
        if _storage._sentimentScoreList != other_storage._sentimentScoreList {return false}
        if _storage._languageSplit != other_storage._languageSplit {return false}
        if _storage._tripTypeSplit != other_storage._tripTypeSplit {return false}
        if _storage._summary != other_storage._summary {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.Snippet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "confidence"),
    3: .standard(proto: "category_id_list"),
    4: .same(proto: "sentiment"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.Snippet) -> Bool {
    if self.text != other.text {return false}
    if self.confidence != other.confidence {return false}
    if self.categoryIDList != other.categoryIDList {return false}
    if self.sentiment != other.sentiment {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.SubCategoryList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "ratio"),
    3: .same(proto: "score"),
    4: .standard(proto: "review_count"),
    5: .standard(proto: "category_name"),
    6: .same(proto: "text"),
    7: .same(proto: "relevance"),
    8: .same(proto: "sentiment"),
    9: .standard(proto: "short_text"),
    10: .standard(proto: "category_id"),
    11: .standard(proto: "highlight_list"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.SubCategoryList) -> Bool {
    if self.count != other.count {return false}
    if self.ratio != other.ratio {return false}
    if self.score != other.score {return false}
    if self.reviewCount != other.reviewCount {return false}
    if self.categoryName != other.categoryName {return false}
    if self.text != other.text {return false}
    if self.relevance != other.relevance {return false}
    if self.sentiment != other.sentiment {return false}
    if self.shortText != other.shortText {return false}
    if self.categoryID != other.categoryID {return false}
    if self.highlightList != other.highlightList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.CategoryList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "score"),
    3: .standard(proto: "category_id"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.CategoryList) -> Bool {
    if self.text != other.text {return false}
    if self.score != other.score {return false}
    if self.categoryID != other.categoryID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.BadgeData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "score"),
    2: .same(proto: "popularity"),
    3: .standard(proto: "category_id"),
    4: .standard(proto: "category_name"),
    5: .standard(proto: "global_popularity"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.BadgeData) -> Bool {
    if self.score != other.score {return false}
    if self.popularity != other.popularity {return false}
    if self.categoryID != other.categoryID {return false}
    if self.categoryName != other.categoryName {return false}
    if self.globalPopularity != other.globalPopularity {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.GoodToKnow: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "ratio"),
    3: .same(proto: "score"),
    4: .standard(proto: "review_count"),
    5: .standard(proto: "category_name"),
    6: .same(proto: "text"),
    7: .same(proto: "relevance"),
    8: .same(proto: "sentiment"),
    9: .standard(proto: "short_text"),
    10: .standard(proto: "category_id"),
    11: .standard(proto: "highlight_list"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.GoodToKnow) -> Bool {
    if self.count != other.count {return false}
    if self.ratio != other.ratio {return false}
    if self.score != other.score {return false}
    if self.reviewCount != other.reviewCount {return false}
    if self.categoryName != other.categoryName {return false}
    if self.text != other.text {return false}
    if self.relevance != other.relevance {return false}
    if self.sentiment != other.sentiment {return false}
    if self.shortText != other.shortText {return false}
    if self.categoryID != other.categoryID {return false}
    if self.highlightList != other.highlightList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.SentimentScoreList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "ratio"),
    3: .same(proto: "score"),
    4: .standard(proto: "review_count"),
    5: .standard(proto: "category_name"),
    6: .same(proto: "text"),
    7: .same(proto: "relevance"),
    8: .same(proto: "sentiment"),
    9: .standard(proto: "short_text"),
    10: .standard(proto: "category_id"),
    11: .standard(proto: "highlight_list"),
    12: .standard(proto: "sub_category_list"),
    13: .standard(proto: "summary_sentence_list"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.SentimentScoreList) -> Bool {
    if self.count != other.count {return false}
    if self.ratio != other.ratio {return false}
    if self.score != other.score {return false}
    if self.reviewCount != other.reviewCount {return false}
    if self.categoryName != other.categoryName {return false}
    if self.text != other.text {return false}
    if self.relevance != other.relevance {return false}
    if self.sentiment != other.sentiment {return false}
    if self.shortText != other.shortText {return false}
    if self.categoryID != other.categoryID {return false}
    if self.highlightList != other.highlightList {return false}
    if self.subCategoryList != other.subCategoryList {return false}
    if self.summarySentenceList != other.summarySentenceList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.HotelType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "ratio"),
    3: .same(proto: "score"),
    4: .standard(proto: "review_count"),
    5: .standard(proto: "category_name"),
    6: .same(proto: "text"),
    7: .same(proto: "relevance"),
    8: .same(proto: "sentiment"),
    9: .standard(proto: "short_text"),
    10: .standard(proto: "category_id"),
    11: .standard(proto: "highlight_list"),
    12: .standard(proto: "sub_category_list"),
    13: .standard(proto: "global_popularity"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.HotelType) -> Bool {
    if self.count != other.count {return false}
    if self.ratio != other.ratio {return false}
    if self.score != other.score {return false}
    if self.reviewCount != other.reviewCount {return false}
    if self.categoryName != other.categoryName {return false}
    if self.text != other.text {return false}
    if self.relevance != other.relevance {return false}
    if self.sentiment != other.sentiment {return false}
    if self.shortText != other.shortText {return false}
    if self.categoryID != other.categoryID {return false}
    if self.highlightList != other.highlightList {return false}
    if self.subCategoryList != other.subCategoryList {return false}
    if self.globalPopularity != other.globalPopularity {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.Badge: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "subtext"),
    3: .same(proto: "snippets"),
    4: .standard(proto: "badge_type"),
    5: .standard(proto: "badge_data"),
  ]

  fileprivate class _StorageClass {
    var _text: String = String()
    var _subtext: String = String()
    var _snippets: [PBTrustyou.Snippet] = []
    var _badgeType: String = String()
    var _badgeData: PBTrustyou.BadgeData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _text = source._text
      _subtext = source._subtext
      _snippets = source._snippets
      _badgeType = source._badgeType
      _badgeData = source._badgeData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBTrustyou.Badge) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._text != other_storage._text {return false}
        if _storage._subtext != other_storage._subtext {return false}
        if _storage._snippets != other_storage._snippets {return false}
        if _storage._badgeType != other_storage._badgeType {return false}
        if _storage._badgeData != other_storage._badgeData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.GenderTalks: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "ratio"),
    3: .same(proto: "score"),
    4: .same(proto: "text"),
    5: .same(proto: "gender"),
    6: .same(proto: "relevance"),
    7: .same(proto: "sentiment"),
    8: .standard(proto: "short_text"),
    9: .standard(proto: "category_id"),
    10: .standard(proto: "review_count"),
    11: .standard(proto: "category_name"),
    12: .standard(proto: "highlight_list"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.GenderTalks) -> Bool {
    if self.count != other.count {return false}
    if self.ratio != other.ratio {return false}
    if self.score != other.score {return false}
    if self.text != other.text {return false}
    if self.gender != other.gender {return false}
    if self.relevance != other.relevance {return false}
    if self.sentiment != other.sentiment {return false}
    if self.shortText != other.shortText {return false}
    if self.categoryID != other.categoryID {return false}
    if self.reviewCount != other.reviewCount {return false}
    if self.categoryName != other.categoryName {return false}
    if self.highlightList != other.highlightList {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.AltSummary: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "score"),
    3: .same(proto: "popularity"),
    4: .standard(proto: "category_list"),
    5: .standard(proto: "global_popularity"),
    6: .standard(proto: "score_description"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.AltSummary) -> Bool {
    if self.text != other.text {return false}
    if self.score != other.score {return false}
    if self.popularity != other.popularity {return false}
    if self.categoryList != other.categoryList {return false}
    if self.globalPopularity != other.globalPopularity {return false}
    if self.scoreDescription != other.scoreDescription {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.Summary: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reviews_count"),
    2: .same(proto: "score"),
    3: .same(proto: "popularity"),
    4: .same(proto: "text"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.Summary) -> Bool {
    if self.reviewsCount != other.reviewsCount {return false}
    if self.score != other.score {return false}
    if self.popularity != other.popularity {return false}
    if self.text != other.text {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.LanguageSplit: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "percentage"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.LanguageSplit) -> Bool {
    if self.percentage != other.percentage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBTrustyou.TripTypeSplit: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trip_type_split"),
  ]

  func _protobuf_generated_isEqualTo(other: PBTrustyou.TripTypeSplit) -> Bool {
    if self.tripTypeSplit != other.tripTypeSplit {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
