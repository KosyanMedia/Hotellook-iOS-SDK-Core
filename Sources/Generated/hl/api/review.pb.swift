// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/review.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBGate: SwiftProtobuf.Message {
  static let protoMessageName: String = "Gate"

  var name: String = String()

  var beautyName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.beautyName)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.beautyName.isEmpty {
      try visitor.visitSingularStringField(value: self.beautyName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBHotelReview: SwiftProtobuf.Message {
  static let protoMessageName: String = "HotelReview"

  var gateID: UInt32 {
    get {return _storage._gateID}
    set {_uniqueStorage()._gateID = newValue}
  }

  var createdAt: Int64 {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  var authorName: String {
    get {return _storage._authorName}
    set {_uniqueStorage()._authorName = newValue}
  }

  var rating: PBHotelReview.Rating {
    get {return _storage._rating ?? PBHotelReview.Rating()}
    set {_uniqueStorage()._rating = newValue}
  }
  /// Returns true if `rating` has been explicitly set.
  var hasRating: Bool {return _storage._rating != nil}
  /// Clears the value of `rating`. Subsequent reads from it will return its default value.
  mutating func clearRating() {_storage._rating = nil}

  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  var textPlus: String {
    get {return _storage._textPlus}
    set {_uniqueStorage()._textPlus = newValue}
  }

  var textMinus: String {
    get {return _storage._textMinus}
    set {_uniqueStorage()._textMinus = newValue}
  }

  var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Rating: SwiftProtobuf.Message {
    static let protoMessageName: String = PBHotelReview.protoMessageName + ".Rating"

    var val: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &self.val)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.val != 0 {
        try visitor.visitSingularFloatField(value: self.val, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Text: SwiftProtobuf.Message {
    static let protoMessageName: String = PBHotelReview.protoMessageName + ".Text"

    var val: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.val)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.val.isEmpty {
        try visitor.visitSingularStringField(value: self.val, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._gateID)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._authorName)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._rating)
        case 5: try decoder.decodeSingularStringField(value: &_storage._text)
        case 6: try decoder.decodeSingularStringField(value: &_storage._textPlus)
        case 7: try decoder.decodeSingularStringField(value: &_storage._textMinus)
        case 8: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._gateID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._gateID, fieldNumber: 1)
      }
      if _storage._createdAt != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdAt, fieldNumber: 2)
      }
      if !_storage._authorName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._authorName, fieldNumber: 3)
      }
      if let v = _storage._rating {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 5)
      }
      if !_storage._textPlus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._textPlus, fieldNumber: 6)
      }
      if !_storage._textMinus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._textMinus, fieldNumber: 7)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBGate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "beauty_name"),
  ]

  func _protobuf_generated_isEqualTo(other: PBGate) -> Bool {
    if self.name != other.name {return false}
    if self.beautyName != other.beautyName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotelReview: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gate_id"),
    2: .standard(proto: "created_at"),
    3: .standard(proto: "author_name"),
    4: .same(proto: "rating"),
    5: .same(proto: "text"),
    6: .standard(proto: "text_plus"),
    7: .standard(proto: "text_minus"),
    8: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _gateID: UInt32 = 0
    var _createdAt: Int64 = 0
    var _authorName: String = String()
    var _rating: PBHotelReview.Rating? = nil
    var _text: String = String()
    var _textPlus: String = String()
    var _textMinus: String = String()
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gateID = source._gateID
      _createdAt = source._createdAt
      _authorName = source._authorName
      _rating = source._rating
      _text = source._text
      _textPlus = source._textPlus
      _textMinus = source._textMinus
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBHotelReview) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._gateID != other_storage._gateID {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        if _storage._authorName != other_storage._authorName {return false}
        if _storage._rating != other_storage._rating {return false}
        if _storage._text != other_storage._text {return false}
        if _storage._textPlus != other_storage._textPlus {return false}
        if _storage._textMinus != other_storage._textMinus {return false}
        if _storage._url != other_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotelReview.Rating: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotelReview.Rating) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotelReview.Text: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "val"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotelReview.Text) -> Bool {
    if self.val != other.val {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
