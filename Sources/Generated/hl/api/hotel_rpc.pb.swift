// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/hotel_rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBHotelInfoRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "HotelInfoRequest"

  var hotelsIds: [UInt32] = []

  var locale: String = String()

  var fields: String = String()

  var useTrustyouRating: Bool = false

  /// hide_pois_without_name - filtered pois without name
  var hidePoisWithoutName: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.hotelsIds)
      case 2: try decoder.decodeSingularStringField(value: &self.locale)
      case 3: try decoder.decodeSingularStringField(value: &self.fields)
      case 4: try decoder.decodeSingularBoolField(value: &self.useTrustyouRating)
      case 9: try decoder.decodeSingularBoolField(value: &self.hidePoisWithoutName)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hotelsIds.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.hotelsIds, fieldNumber: 1)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 2)
    }
    if !self.fields.isEmpty {
      try visitor.visitSingularStringField(value: self.fields, fieldNumber: 3)
    }
    if self.useTrustyouRating != false {
      try visitor.visitSingularBoolField(value: self.useTrustyouRating, fieldNumber: 4)
    }
    if self.hidePoisWithoutName != false {
      try visitor.visitSingularBoolField(value: self.hidePoisWithoutName, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBHotelInfoResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "HotelInfoResponse"

  var hotels: Dictionary<UInt32,PBHotel> = [:]

  var trustyou: Dictionary<UInt32,PBTrustyou> = [:]

  var districts: Dictionary<UInt32,PBDistrict> = [:]

  var pois: Dictionary<UInt32,PBPoi> = [:]

  var locations: Dictionary<UInt32,PBLocation> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBHotel>.self, value: &self.hotels)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBTrustyou>.self, value: &self.trustyou)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDistrict>.self, value: &self.districts)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBPoi>.self, value: &self.pois)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBLocation>.self, value: &self.locations)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hotels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBHotel>.self, value: self.hotels, fieldNumber: 1)
    }
    if !self.trustyou.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBTrustyou>.self, value: self.trustyou, fieldNumber: 2)
    }
    if !self.districts.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBDistrict>.self, value: self.districts, fieldNumber: 3)
    }
    if !self.pois.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBPoi>.self, value: self.pois, fieldNumber: 4)
    }
    if !self.locations.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBLocation>.self, value: self.locations, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBHotelInfoRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hotels_ids"),
    2: .same(proto: "locale"),
    3: .same(proto: "fields"),
    4: .standard(proto: "use_trustyou_rating"),
    9: .standard(proto: "hide_pois_without_name"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotelInfoRequest) -> Bool {
    if self.hotelsIds != other.hotelsIds {return false}
    if self.locale != other.locale {return false}
    if self.fields != other.fields {return false}
    if self.useTrustyouRating != other.useTrustyouRating {return false}
    if self.hidePoisWithoutName != other.hidePoisWithoutName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBHotelInfoResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hotels"),
    2: .same(proto: "trustyou"),
    3: .same(proto: "districts"),
    4: .same(proto: "pois"),
    5: .same(proto: "locations"),
  ]

  func _protobuf_generated_isEqualTo(other: PBHotelInfoResponse) -> Bool {
    if self.hotels != other.hotels {return false}
    if self.trustyou != other.trustyou {return false}
    if self.districts != other.districts {return false}
    if self.pois != other.pois {return false}
    if self.locations != other.locations {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
