// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/search_rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBSearchResultResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "SearchResultResponse"

  var gates: Dictionary<UInt32,PBSearchResultResponse.Gate> {
    get {return _storage._gates}
    set {_uniqueStorage()._gates = newValue}
  }

  var stop: Bool {
    get {return _storage._stop}
    set {_uniqueStorage()._stop = newValue}
  }

  var hotels: Dictionary<UInt32,PBSearchResultResponse.Hotel> {
    get {return _storage._hotels}
    set {_uniqueStorage()._hotels = newValue}
  }

  var hotelsDiscounts: Dictionary<UInt32,PBSearchResultResponse.Discount> {
    get {return _storage._hotelsDiscounts}
    set {_uniqueStorage()._hotelsDiscounts = newValue}
  }

  var hotelsHighlights: Dictionary<UInt32,PBSearchResultResponse.Highlights> {
    get {return _storage._hotelsHighlights}
    set {_uniqueStorage()._hotelsHighlights = newValue}
  }

  var badges: PBSearchResultResponse.Badges {
    get {return _storage._badges ?? PBSearchResultResponse.Badges()}
    set {_uniqueStorage()._badges = newValue}
  }
  /// Returns true if `badges` has been explicitly set.
  var hasBadges: Bool {return _storage._badges != nil}
  /// Clears the value of `badges`. Subsequent reads from it will return its default value.
  mutating func clearBadges() {_storage._badges = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Proposal: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".Proposal"

    var gateID: UInt32 {
      get {return _storage._gateID}
      set {_uniqueStorage()._gateID = newValue}
    }

    var internalTypeID: UInt32 {
      get {return _storage._internalTypeID}
      set {_uniqueStorage()._internalTypeID = newValue}
    }

    var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    ///        DEPRECATED
    var pid: String {
      get {return _storage._pid}
      set {_uniqueStorage()._pid = newValue}
    }

    var price: Float {
      get {return _storage._price}
      set {_uniqueStorage()._price = newValue}
    }

    var priceUsd: Float {
      get {return _storage._priceUsd}
      set {_uniqueStorage()._priceUsd = newValue}
    }

    var roomID: UInt32 {
      get {return _storage._roomID}
      set {_uniqueStorage()._roomID = newValue}
    }

    var options: PBProposalOptions {
      get {return _storage._options ?? PBProposalOptions()}
      set {_uniqueStorage()._options = newValue}
    }
    /// Returns true if `options` has been explicitly set.
    var hasOptions: Bool {return _storage._options != nil}
    /// Clears the value of `options`. Subsequent reads from it will return its default value.
    mutating func clearOptions() {_storage._options = nil}

    var deeplink: String {
      get {return _storage._deeplink}
      set {_uniqueStorage()._deeplink = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularUInt32Field(value: &_storage._gateID)
          case 2: try decoder.decodeSingularUInt32Field(value: &_storage._internalTypeID)
          case 3: try decoder.decodeSingularStringField(value: &_storage._name)
          case 4: try decoder.decodeSingularStringField(value: &_storage._pid)
          case 5: try decoder.decodeSingularFloatField(value: &_storage._price)
          case 6: try decoder.decodeSingularFloatField(value: &_storage._priceUsd)
          case 7: try decoder.decodeSingularUInt32Field(value: &_storage._roomID)
          case 8: try decoder.decodeSingularMessageField(value: &_storage._options)
          case 9: try decoder.decodeSingularStringField(value: &_storage._deeplink)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._gateID != 0 {
          try visitor.visitSingularUInt32Field(value: _storage._gateID, fieldNumber: 1)
        }
        if _storage._internalTypeID != 0 {
          try visitor.visitSingularUInt32Field(value: _storage._internalTypeID, fieldNumber: 2)
        }
        if !_storage._name.isEmpty {
          try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
        }
        if !_storage._pid.isEmpty {
          try visitor.visitSingularStringField(value: _storage._pid, fieldNumber: 4)
        }
        if _storage._price != 0 {
          try visitor.visitSingularFloatField(value: _storage._price, fieldNumber: 5)
        }
        if _storage._priceUsd != 0 {
          try visitor.visitSingularFloatField(value: _storage._priceUsd, fieldNumber: 6)
        }
        if _storage._roomID != 0 {
          try visitor.visitSingularUInt32Field(value: _storage._roomID, fieldNumber: 7)
        }
        if let v = _storage._options {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
        }
        if !_storage._deeplink.isEmpty {
          try visitor.visitSingularStringField(value: _storage._deeplink, fieldNumber: 9)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Gate: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".Gate"

    var name: String = String()

    var received: Bool = false

    var hotelsCount: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.name)
        case 2: try decoder.decodeSingularBoolField(value: &self.received)
        case 3: try decoder.decodeSingularUInt32Field(value: &self.hotelsCount)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.name.isEmpty {
        try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
      }
      if self.received != false {
        try visitor.visitSingularBoolField(value: self.received, fieldNumber: 2)
      }
      if self.hotelsCount != 0 {
        try visitor.visitSingularUInt32Field(value: self.hotelsCount, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Hotel: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".Hotel"

    var proposals: [PBSearchResultResponse.Proposal] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &self.proposals)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.proposals.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.proposals, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Discount: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".Discount"

    var gatesRooms: Dictionary<UInt32,PBSearchResultResponse.Discount.Room> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct RoomDiscount: SwiftProtobuf.Message {
      static let protoMessageName: String = PBSearchResultResponse.Discount.protoMessageName + ".RoomDiscount"

      var changePercentage: Int32 = 0

      var oldPrice: Float = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt32Field(value: &self.changePercentage)
          case 2: try decoder.decodeSingularFloatField(value: &self.oldPrice)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.changePercentage != 0 {
          try visitor.visitSingularInt32Field(value: self.changePercentage, fieldNumber: 1)
        }
        if self.oldPrice != 0 {
          try visitor.visitSingularFloatField(value: self.oldPrice, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    struct Room: SwiftProtobuf.Message {
      static let protoMessageName: String = PBSearchResultResponse.Discount.protoMessageName + ".Room"

      var discounts: Dictionary<UInt32,PBSearchResultResponse.Discount.RoomDiscount> = [:]

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Discount.RoomDiscount>.self, value: &self.discounts)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.discounts.isEmpty {
          try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Discount.RoomDiscount>.self, value: self.discounts, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Discount.Room>.self, value: &self.gatesRooms)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.gatesRooms.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Discount.Room>.self, value: self.gatesRooms, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Highlights: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".Highlights"

    var gates: Dictionary<UInt32,PBSearchResultResponse.Highlights.Highlight> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Highlight: SwiftProtobuf.Message {
      static let protoMessageName: String = PBSearchResultResponse.Highlights.protoMessageName + ".Highlight"

      var room: Dictionary<UInt32,String> = [:]

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: &self.room)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.room.isEmpty {
          try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: self.room, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Highlights.Highlight>.self, value: &self.gates)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.gates.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Highlights.Highlight>.self, value: self.gates, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Badge: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".Badge"

    var label: String = String()

    var color: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.label)
        case 2: try decoder.decodeSingularStringField(value: &self.color)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.label.isEmpty {
        try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
      }
      if !self.color.isEmpty {
        try visitor.visitSingularStringField(value: self.color, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct HotelsBadges: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".HotelsBadges"

    var badges: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &self.badges)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.badges.isEmpty {
        try visitor.visitRepeatedStringField(value: self.badges, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Badges: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchResultResponse.protoMessageName + ".Badges"

    var hotelsRank: Dictionary<UInt32,UInt32> = [:]

    var badges: Dictionary<String,PBSearchResultResponse.Badge> = [:]

    var hotelsBadges: Dictionary<UInt32,PBSearchResultResponse.HotelsBadges> = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &self.hotelsRank)
        case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBSearchResultResponse.Badge>.self, value: &self.badges)
        case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.HotelsBadges>.self, value: &self.hotelsBadges)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.hotelsRank.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: self.hotelsRank, fieldNumber: 1)
      }
      if !self.badges.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBSearchResultResponse.Badge>.self, value: self.badges, fieldNumber: 2)
      }
      if !self.hotelsBadges.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.HotelsBadges>.self, value: self.hotelsBadges, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Gate>.self, value: &_storage._gates)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._stop)
        case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Hotel>.self, value: &_storage._hotels)
        case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Discount>.self, value: &_storage._hotelsDiscounts)
        case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Highlights>.self, value: &_storage._hotelsHighlights)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._badges)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._gates.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Gate>.self, value: _storage._gates, fieldNumber: 1)
      }
      if _storage._stop != false {
        try visitor.visitSingularBoolField(value: _storage._stop, fieldNumber: 2)
      }
      if !_storage._hotels.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Hotel>.self, value: _storage._hotels, fieldNumber: 3)
      }
      if !_storage._hotelsDiscounts.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Discount>.self, value: _storage._hotelsDiscounts, fieldNumber: 4)
      }
      if !_storage._hotelsHighlights.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBSearchResultResponse.Highlights>.self, value: _storage._hotelsHighlights, fieldNumber: 5)
      }
      if let v = _storage._badges {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PBSearchResultRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "SearchResultRequest"

  var searchID: String = String()

  var hotelsIds: [UInt32] = []

  var lastRequestFailed: Bool = false

  var receivedGatesIds: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.searchID)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.hotelsIds)
      case 3: try decoder.decodeSingularBoolField(value: &self.lastRequestFailed)
      case 4: try decoder.decodeRepeatedUInt32Field(value: &self.receivedGatesIds)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.searchID.isEmpty {
      try visitor.visitSingularStringField(value: self.searchID, fieldNumber: 1)
    }
    if !self.hotelsIds.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.hotelsIds, fieldNumber: 2)
    }
    if self.lastRequestFailed != false {
      try visitor.visitSingularBoolField(value: self.lastRequestFailed, fieldNumber: 3)
    }
    if !self.receivedGatesIds.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.receivedGatesIds, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBSearchCreateRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "SearchCreateRequest"

  var hotelsIds: [UInt32] = []

  var checkIn: String = String()

  var checkOut: String = String()

  var currency: String = String()

  var locale: String = String()

  var marker: String = String()

  var host: String = String()

  var locationsIds: [UInt32] = []

  var mobileToken: String = String()

  var allowEn: Bool = false

  var uuid: String = String()

  var rooms: [PBRoom] = []

  var flags: Dictionary<String,String> = [:]

  var resultChunkSize: UInt32 = 0

  var fields: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.hotelsIds)
      case 2: try decoder.decodeSingularStringField(value: &self.checkIn)
      case 3: try decoder.decodeSingularStringField(value: &self.checkOut)
      case 4: try decoder.decodeSingularStringField(value: &self.currency)
      case 5: try decoder.decodeSingularStringField(value: &self.locale)
      case 6: try decoder.decodeSingularStringField(value: &self.marker)
      case 7: try decoder.decodeSingularStringField(value: &self.host)
      case 8: try decoder.decodeRepeatedUInt32Field(value: &self.locationsIds)
      case 9: try decoder.decodeSingularStringField(value: &self.mobileToken)
      case 10: try decoder.decodeSingularBoolField(value: &self.allowEn)
      case 11: try decoder.decodeSingularStringField(value: &self.uuid)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.rooms)
      case 13: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.flags)
      case 14: try decoder.decodeSingularUInt32Field(value: &self.resultChunkSize)
      case 15: try decoder.decodeSingularStringField(value: &self.fields)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hotelsIds.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.hotelsIds, fieldNumber: 1)
    }
    if !self.checkIn.isEmpty {
      try visitor.visitSingularStringField(value: self.checkIn, fieldNumber: 2)
    }
    if !self.checkOut.isEmpty {
      try visitor.visitSingularStringField(value: self.checkOut, fieldNumber: 3)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 4)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 5)
    }
    if !self.marker.isEmpty {
      try visitor.visitSingularStringField(value: self.marker, fieldNumber: 6)
    }
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 7)
    }
    if !self.locationsIds.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.locationsIds, fieldNumber: 8)
    }
    if !self.mobileToken.isEmpty {
      try visitor.visitSingularStringField(value: self.mobileToken, fieldNumber: 9)
    }
    if self.allowEn != false {
      try visitor.visitSingularBoolField(value: self.allowEn, fieldNumber: 10)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 11)
    }
    if !self.rooms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rooms, fieldNumber: 12)
    }
    if !self.flags.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.flags, fieldNumber: 13)
    }
    if self.resultChunkSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultChunkSize, fieldNumber: 14)
    }
    if !self.fields.isEmpty {
      try visitor.visitSingularStringField(value: self.fields, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBSearchCreateResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "SearchCreateResponse"

  var searchID: String {
    get {return _storage._searchID}
    set {_uniqueStorage()._searchID = newValue}
  }

  var resultsTtl: UInt32 {
    get {return _storage._resultsTtl}
    set {_uniqueStorage()._resultsTtl = newValue}
  }

  var gatesList: [UInt32] {
    get {return _storage._gatesList}
    set {_uniqueStorage()._gatesList = newValue}
  }

  var gatesNames: Dictionary<UInt32,String> {
    get {return _storage._gatesNames}
    set {_uniqueStorage()._gatesNames = newValue}
  }

  var gatesSortedOrder: [UInt32] {
    get {return _storage._gatesSortedOrder}
    set {_uniqueStorage()._gatesSortedOrder = newValue}
  }

  var gatesToShowUser: [UInt32] {
    get {return _storage._gatesToShowUser}
    set {_uniqueStorage()._gatesToShowUser = newValue}
  }

  var roomTypes: Dictionary<UInt32,PBRoomType> {
    get {return _storage._roomTypes}
    set {_uniqueStorage()._roomTypes = newValue}
  }

  var mobileMeta: PBSearchCreateResponse.MobileMeta {
    get {return _storage._mobileMeta ?? PBSearchCreateResponse.MobileMeta()}
    set {_uniqueStorage()._mobileMeta = newValue}
  }
  /// Returns true if `mobileMeta` has been explicitly set.
  var hasMobileMeta: Bool {return _storage._mobileMeta != nil}
  /// Clears the value of `mobileMeta`. Subsequent reads from it will return its default value.
  mutating func clearMobileMeta() {_storage._mobileMeta = nil}

  var resultsTtlByGate: Dictionary<UInt32,UInt32> {
    get {return _storage._resultsTtlByGate}
    set {_uniqueStorage()._resultsTtlByGate = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct MobileMeta: SwiftProtobuf.Message {
    static let protoMessageName: String = PBSearchCreateResponse.protoMessageName + ".MobileMeta"

    var abGroup: String = String()

    var abName: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.abGroup)
        case 2: try decoder.decodeSingularStringField(value: &self.abName)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.abGroup.isEmpty {
        try visitor.visitSingularStringField(value: self.abGroup, fieldNumber: 1)
      }
      if !self.abName.isEmpty {
        try visitor.visitSingularStringField(value: self.abName, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._searchID)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._resultsTtl)
        case 3: try decoder.decodeRepeatedUInt32Field(value: &_storage._gatesList)
        case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: &_storage._gatesNames)
        case 5: try decoder.decodeRepeatedUInt32Field(value: &_storage._gatesSortedOrder)
        case 6: try decoder.decodeRepeatedUInt32Field(value: &_storage._gatesToShowUser)
        case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBRoomType>.self, value: &_storage._roomTypes)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._mobileMeta)
        case 9: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: &_storage._resultsTtlByGate)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._searchID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._searchID, fieldNumber: 1)
      }
      if _storage._resultsTtl != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._resultsTtl, fieldNumber: 2)
      }
      if !_storage._gatesList.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._gatesList, fieldNumber: 3)
      }
      if !_storage._gatesNames.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufString>.self, value: _storage._gatesNames, fieldNumber: 4)
      }
      if !_storage._gatesSortedOrder.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._gatesSortedOrder, fieldNumber: 5)
      }
      if !_storage._gatesToShowUser.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._gatesToShowUser, fieldNumber: 6)
      }
      if !_storage._roomTypes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBRoomType>.self, value: _storage._roomTypes, fieldNumber: 7)
      }
      if let v = _storage._mobileMeta {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._resultsTtlByGate.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt32,SwiftProtobuf.ProtobufUInt32>.self, value: _storage._resultsTtlByGate, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct PBClickRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "ClickRequest"

  var searchID: String = String()

  var hotelID: UInt32 = 0

  var roomID: UInt32 = 0

  var gateID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.searchID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.hotelID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.roomID)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.gateID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.searchID.isEmpty {
      try visitor.visitSingularStringField(value: self.searchID, fieldNumber: 1)
    }
    if self.hotelID != 0 {
      try visitor.visitSingularUInt32Field(value: self.hotelID, fieldNumber: 2)
    }
    if self.roomID != 0 {
      try visitor.visitSingularUInt32Field(value: self.roomID, fieldNumber: 3)
    }
    if self.gateID != 0 {
      try visitor.visitSingularUInt32Field(value: self.gateID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBClickResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "ClickResponse"

  var deeplink: String = String()

  var price: Float = 0

  var gateName: String = String()

  var officialWebsite: Bool = false

  var webviewjs: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.deeplink)
      case 2: try decoder.decodeSingularFloatField(value: &self.price)
      case 3: try decoder.decodeSingularStringField(value: &self.gateName)
      case 4: try decoder.decodeSingularBoolField(value: &self.officialWebsite)
      case 5: try decoder.decodeRepeatedStringField(value: &self.webviewjs)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deeplink.isEmpty {
      try visitor.visitSingularStringField(value: self.deeplink, fieldNumber: 1)
    }
    if self.price != 0 {
      try visitor.visitSingularFloatField(value: self.price, fieldNumber: 2)
    }
    if !self.gateName.isEmpty {
      try visitor.visitSingularStringField(value: self.gateName, fieldNumber: 3)
    }
    if self.officialWebsite != false {
      try visitor.visitSingularBoolField(value: self.officialWebsite, fieldNumber: 4)
    }
    if !self.webviewjs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.webviewjs, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBSearchResultResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gates"),
    2: .same(proto: "stop"),
    3: .same(proto: "hotels"),
    4: .standard(proto: "hotels_discounts"),
    5: .standard(proto: "hotels_highlights"),
    6: .same(proto: "badges"),
  ]

  fileprivate class _StorageClass {
    var _gates: Dictionary<UInt32,PBSearchResultResponse.Gate> = [:]
    var _stop: Bool = false
    var _hotels: Dictionary<UInt32,PBSearchResultResponse.Hotel> = [:]
    var _hotelsDiscounts: Dictionary<UInt32,PBSearchResultResponse.Discount> = [:]
    var _hotelsHighlights: Dictionary<UInt32,PBSearchResultResponse.Highlights> = [:]
    var _badges: PBSearchResultResponse.Badges? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gates = source._gates
      _stop = source._stop
      _hotels = source._hotels
      _hotelsDiscounts = source._hotelsDiscounts
      _hotelsHighlights = source._hotelsHighlights
      _badges = source._badges
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._gates != other_storage._gates {return false}
        if _storage._stop != other_storage._stop {return false}
        if _storage._hotels != other_storage._hotels {return false}
        if _storage._hotelsDiscounts != other_storage._hotelsDiscounts {return false}
        if _storage._hotelsHighlights != other_storage._hotelsHighlights {return false}
        if _storage._badges != other_storage._badges {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Proposal: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gate_id"),
    2: .standard(proto: "internal_type_id"),
    3: .same(proto: "name"),
    4: .same(proto: "pid"),
    5: .same(proto: "price"),
    6: .standard(proto: "price_usd"),
    7: .standard(proto: "room_id"),
    8: .same(proto: "options"),
    9: .same(proto: "deeplink"),
  ]

  fileprivate class _StorageClass {
    var _gateID: UInt32 = 0
    var _internalTypeID: UInt32 = 0
    var _name: String = String()
    var _pid: String = String()
    var _price: Float = 0
    var _priceUsd: Float = 0
    var _roomID: UInt32 = 0
    var _options: PBProposalOptions? = nil
    var _deeplink: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gateID = source._gateID
      _internalTypeID = source._internalTypeID
      _name = source._name
      _pid = source._pid
      _price = source._price
      _priceUsd = source._priceUsd
      _roomID = source._roomID
      _options = source._options
      _deeplink = source._deeplink
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Proposal) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._gateID != other_storage._gateID {return false}
        if _storage._internalTypeID != other_storage._internalTypeID {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._pid != other_storage._pid {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._priceUsd != other_storage._priceUsd {return false}
        if _storage._roomID != other_storage._roomID {return false}
        if _storage._options != other_storage._options {return false}
        if _storage._deeplink != other_storage._deeplink {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Gate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "received"),
    3: .standard(proto: "hotels_count"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Gate) -> Bool {
    if self.name != other.name {return false}
    if self.received != other.received {return false}
    if self.hotelsCount != other.hotelsCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Hotel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proposals"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Hotel) -> Bool {
    if self.proposals != other.proposals {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Discount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gates_rooms"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Discount) -> Bool {
    if self.gatesRooms != other.gatesRooms {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Discount.RoomDiscount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "change_percentage"),
    2: .standard(proto: "old_price"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Discount.RoomDiscount) -> Bool {
    if self.changePercentage != other.changePercentage {return false}
    if self.oldPrice != other.oldPrice {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Discount.Room: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "discounts"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Discount.Room) -> Bool {
    if self.discounts != other.discounts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Highlights: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gates"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Highlights) -> Bool {
    if self.gates != other.gates {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Highlights.Highlight: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "room"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Highlights.Highlight) -> Bool {
    if self.room != other.room {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Badge: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "color"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Badge) -> Bool {
    if self.label != other.label {return false}
    if self.color != other.color {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.HotelsBadges: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "badges"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.HotelsBadges) -> Bool {
    if self.badges != other.badges {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultResponse.Badges: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hotels_rank"),
    2: .same(proto: "badges"),
    3: .standard(proto: "hotels_badges"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultResponse.Badges) -> Bool {
    if self.hotelsRank != other.hotelsRank {return false}
    if self.badges != other.badges {return false}
    if self.hotelsBadges != other.hotelsBadges {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchResultRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "search_id"),
    2: .standard(proto: "hotels_ids"),
    3: .standard(proto: "last_request_failed"),
    4: .standard(proto: "received_gates_ids"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchResultRequest) -> Bool {
    if self.searchID != other.searchID {return false}
    if self.hotelsIds != other.hotelsIds {return false}
    if self.lastRequestFailed != other.lastRequestFailed {return false}
    if self.receivedGatesIds != other.receivedGatesIds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchCreateRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hotels_ids"),
    2: .standard(proto: "check_in"),
    3: .standard(proto: "check_out"),
    4: .same(proto: "currency"),
    5: .same(proto: "locale"),
    6: .same(proto: "marker"),
    7: .same(proto: "host"),
    8: .standard(proto: "locations_ids"),
    9: .standard(proto: "mobile_token"),
    10: .standard(proto: "allow_en"),
    11: .same(proto: "uuid"),
    12: .same(proto: "rooms"),
    13: .same(proto: "flags"),
    14: .standard(proto: "result_chunk_size"),
    15: .same(proto: "fields"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchCreateRequest) -> Bool {
    if self.hotelsIds != other.hotelsIds {return false}
    if self.checkIn != other.checkIn {return false}
    if self.checkOut != other.checkOut {return false}
    if self.currency != other.currency {return false}
    if self.locale != other.locale {return false}
    if self.marker != other.marker {return false}
    if self.host != other.host {return false}
    if self.locationsIds != other.locationsIds {return false}
    if self.mobileToken != other.mobileToken {return false}
    if self.allowEn != other.allowEn {return false}
    if self.uuid != other.uuid {return false}
    if self.rooms != other.rooms {return false}
    if self.flags != other.flags {return false}
    if self.resultChunkSize != other.resultChunkSize {return false}
    if self.fields != other.fields {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchCreateResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "search_id"),
    2: .standard(proto: "results_ttl"),
    3: .standard(proto: "gates_list"),
    4: .standard(proto: "gates_names"),
    5: .standard(proto: "gates_sorted_order"),
    6: .standard(proto: "gates_to_show_user"),
    7: .standard(proto: "room_types"),
    8: .standard(proto: "mobile_meta"),
    9: .standard(proto: "results_ttl_by_gate"),
  ]

  fileprivate class _StorageClass {
    var _searchID: String = String()
    var _resultsTtl: UInt32 = 0
    var _gatesList: [UInt32] = []
    var _gatesNames: Dictionary<UInt32,String> = [:]
    var _gatesSortedOrder: [UInt32] = []
    var _gatesToShowUser: [UInt32] = []
    var _roomTypes: Dictionary<UInt32,PBRoomType> = [:]
    var _mobileMeta: PBSearchCreateResponse.MobileMeta? = nil
    var _resultsTtlByGate: Dictionary<UInt32,UInt32> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _searchID = source._searchID
      _resultsTtl = source._resultsTtl
      _gatesList = source._gatesList
      _gatesNames = source._gatesNames
      _gatesSortedOrder = source._gatesSortedOrder
      _gatesToShowUser = source._gatesToShowUser
      _roomTypes = source._roomTypes
      _mobileMeta = source._mobileMeta
      _resultsTtlByGate = source._resultsTtlByGate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: PBSearchCreateResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._searchID != other_storage._searchID {return false}
        if _storage._resultsTtl != other_storage._resultsTtl {return false}
        if _storage._gatesList != other_storage._gatesList {return false}
        if _storage._gatesNames != other_storage._gatesNames {return false}
        if _storage._gatesSortedOrder != other_storage._gatesSortedOrder {return false}
        if _storage._gatesToShowUser != other_storage._gatesToShowUser {return false}
        if _storage._roomTypes != other_storage._roomTypes {return false}
        if _storage._mobileMeta != other_storage._mobileMeta {return false}
        if _storage._resultsTtlByGate != other_storage._resultsTtlByGate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBSearchCreateResponse.MobileMeta: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ab_group"),
    2: .standard(proto: "ab_name"),
  ]

  func _protobuf_generated_isEqualTo(other: PBSearchCreateResponse.MobileMeta) -> Bool {
    if self.abGroup != other.abGroup {return false}
    if self.abName != other.abName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBClickRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "search_id"),
    2: .standard(proto: "hotel_id"),
    3: .standard(proto: "room_id"),
    4: .standard(proto: "gate_id"),
  ]

  func _protobuf_generated_isEqualTo(other: PBClickRequest) -> Bool {
    if self.searchID != other.searchID {return false}
    if self.hotelID != other.hotelID {return false}
    if self.roomID != other.roomID {return false}
    if self.gateID != other.gateID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBClickResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deeplink"),
    2: .same(proto: "price"),
    3: .standard(proto: "gate_name"),
    4: .standard(proto: "official_website"),
    5: .same(proto: "webviewjs"),
  ]

  func _protobuf_generated_isEqualTo(other: PBClickResponse) -> Bool {
    if self.deeplink != other.deeplink {return false}
    if self.price != other.price {return false}
    if self.gateName != other.gateName {return false}
    if self.officialWebsite != other.officialWebsite {return false}
    if self.webviewjs != other.webviewjs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
