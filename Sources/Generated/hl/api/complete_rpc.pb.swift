// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/complete_rpc.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBCompleteRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "CompleteRequest"

  /// required field
  var term: String = String()

  /// required field
  var locale: String = String()

  /// max elements in each group, optional
  var limit: UInt32 = 0

  var fields: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.term)
      case 2: try decoder.decodeSingularStringField(value: &self.locale)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.limit)
      case 4: try decoder.decodeSingularStringField(value: &self.fields)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.term.isEmpty {
      try visitor.visitSingularStringField(value: self.term, fieldNumber: 1)
    }
    if !self.locale.isEmpty {
      try visitor.visitSingularStringField(value: self.locale, fieldNumber: 2)
    }
    if self.limit != 0 {
      try visitor.visitSingularUInt32Field(value: self.limit, fieldNumber: 3)
    }
    if !self.fields.isEmpty {
      try visitor.visitSingularStringField(value: self.fields, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBCompleteResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "CompleteResponse"

  var hotels: [PBHotel] = []

  var cities: [PBLocation] = []

  var airports: [PBAirport] = []

  var locations: Dictionary<UInt32,PBLocation> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.hotels)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.cities)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.airports)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBLocation>.self, value: &self.locations)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hotels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hotels, fieldNumber: 1)
    }
    if !self.cities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cities, fieldNumber: 2)
    }
    if !self.airports.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.airports, fieldNumber: 3)
    }
    if !self.locations.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufUInt32,PBLocation>.self, value: self.locations, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBCompleteRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "locale"),
    3: .same(proto: "limit"),
    4: .same(proto: "fields"),
  ]

  func _protobuf_generated_isEqualTo(other: PBCompleteRequest) -> Bool {
    if self.term != other.term {return false}
    if self.locale != other.locale {return false}
    if self.limit != other.limit {return false}
    if self.fields != other.fields {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBCompleteResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hotels"),
    2: .same(proto: "cities"),
    3: .same(proto: "airports"),
    4: .same(proto: "locations"),
  ]

  func _protobuf_generated_isEqualTo(other: PBCompleteResponse) -> Bool {
    if self.hotels != other.hotels {return false}
    if self.cities != other.cities {return false}
    if self.airports != other.airports {return false}
    if self.locations != other.locations {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
