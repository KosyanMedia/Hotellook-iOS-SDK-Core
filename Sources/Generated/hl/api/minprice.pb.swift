// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hl/api/minprice.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PBMinpriceCalendarRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "MinpriceCalendarRequest"

  var locationID: UInt32 = 0

  var hotelID: UInt32 = 0

  var currency: String = String()

  var adults: UInt32 = 0

  var priceGroups: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.locationID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.hotelID)
      case 3: try decoder.decodeSingularStringField(value: &self.currency)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.adults)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.priceGroups)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.locationID != 0 {
      try visitor.visitSingularUInt32Field(value: self.locationID, fieldNumber: 1)
    }
    if self.hotelID != 0 {
      try visitor.visitSingularUInt32Field(value: self.hotelID, fieldNumber: 2)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 3)
    }
    if self.adults != 0 {
      try visitor.visitSingularUInt32Field(value: self.adults, fieldNumber: 4)
    }
    if self.priceGroups != 0 {
      try visitor.visitSingularUInt32Field(value: self.priceGroups, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct PBMinpriceCalendarResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "MinpriceCalendarResponse"

  var dates: Dictionary<String,PBMinpriceCalendarResponse.Price> = [:]

  var points: Dictionary<String,Float> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Price: SwiftProtobuf.Message {
    static let protoMessageName: String = PBMinpriceCalendarResponse.protoMessageName + ".Price"

    var price: Float = 0

    var rate: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &self.price)
        case 2: try decoder.decodeSingularUInt32Field(value: &self.rate)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.price != 0 {
        try visitor.visitSingularFloatField(value: self.price, fieldNumber: 1)
      }
      if self.rate != 0 {
        try visitor.visitSingularUInt32Field(value: self.rate, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBMinpriceCalendarResponse.Price>.self, value: &self.dates)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: &self.points)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dates.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PBMinpriceCalendarResponse.Price>.self, value: self.dates, fieldNumber: 1)
    }
    if !self.points.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufFloat>.self, value: self.points, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBMinpriceCalendarRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "location_id"),
    2: .standard(proto: "hotel_id"),
    3: .same(proto: "currency"),
    4: .same(proto: "adults"),
    5: .standard(proto: "price_groups"),
  ]

  func _protobuf_generated_isEqualTo(other: PBMinpriceCalendarRequest) -> Bool {
    if self.locationID != other.locationID {return false}
    if self.hotelID != other.hotelID {return false}
    if self.currency != other.currency {return false}
    if self.adults != other.adults {return false}
    if self.priceGroups != other.priceGroups {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBMinpriceCalendarResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dates"),
    2: .same(proto: "points"),
  ]

  func _protobuf_generated_isEqualTo(other: PBMinpriceCalendarResponse) -> Bool {
    if self.dates != other.dates {return false}
    if self.points != other.points {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PBMinpriceCalendarResponse.Price: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "price"),
    2: .same(proto: "rate"),
  ]

  func _protobuf_generated_isEqualTo(other: PBMinpriceCalendarResponse.Price) -> Bool {
    if self.price != other.price {return false}
    if self.rate != other.rate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
